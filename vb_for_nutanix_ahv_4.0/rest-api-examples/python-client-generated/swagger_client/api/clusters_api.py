# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clusters_get(self, **kwargs):  # noqa: E501
        """Get Collection of Nutanix AHV Clusters  # noqa: E501

        The HTTP GET request to the `/clusters` endpoint retrieves information on Nutanix AHV clusters to which the backup appliance has access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def clusters_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Collection of Nutanix AHV Clusters  # noqa: E501

        The HTTP GET request to the `/clusters` endpoint retrieves information on Nutanix AHV clusters to which the backup appliance has access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Cluster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_auto_protection(self, id, **kwargs):  # noqa: E501
        """Get Cluster Auto-Protection Settings  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/autoProtection` endpoint retrieves auto-protection settings configured for the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_auto_protection(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AutoProtectionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_auto_protection_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_auto_protection_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_auto_protection_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Cluster Auto-Protection Settings  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/autoProtection` endpoint retrieves auto-protection settings configured for the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_auto_protection_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AutoProtectionSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_auto_protection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_auto_protection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/autoProtection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutoProtectionSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_by_id(self, id, **kwargs):  # noqa: E501
        """Get Nutanix AHV Cluster Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}` endpoint retrieves information on a Nutanix AHV cluster with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Nutanix AHV Cluster Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}` endpoint retrieves information on a Nutanix AHV cluster with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_networks(self, id, **kwargs):  # noqa: E501
        """Get Collection of Networks  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/networks` endpoint retrieves a list of all networks configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_networks(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: list[NutanixNetwork]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_networks_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_networks_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_networks_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Networks  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/networks` endpoint retrieves a list of all networks configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_networks_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: list[NutanixNetwork]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_networks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_networks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NutanixNetwork]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_pds(self, id, **kwargs):  # noqa: E501
        """Get Collection of Protection Domains  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/protectionDomains` endpoint retrieves a list of all protection domains configured in the specified Nutanix AHV Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_pds(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfProtectionDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_pds_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_pds_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_pds_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Protection Domains  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/protectionDomains` endpoint retrieves a list of all protection domains configured in the specified Nutanix AHV Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_pds_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfProtectionDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_pds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_pds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/protectionDomains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfProtectionDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_storage_containers(self, id, **kwargs):  # noqa: E501
        """Get Collection of Storage Containers  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/storageContainers` endpoint retrieves a list of all storage containers configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_storage_containers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfStorageContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_storage_containers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_storage_containers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_storage_containers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Storage Containers  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/storageContainers` endpoint retrieves a list of all storage containers configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_storage_containers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfStorageContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_storage_containers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_storage_containers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/storageContainers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfStorageContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_vm_by_id(self, id, vm_id, **kwargs):  # noqa: E501
        """Get Virtual Machine Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/vms/{vmId}` endpoint retrieves information on a VM with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_vm_by_id(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param str vm_id: Specifies the ID assigned to a VM that belongs to the specified cluster. (required)
        :return: VirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_vm_by_id_with_http_info(id, vm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_vm_by_id_with_http_info(id, vm_id, **kwargs)  # noqa: E501
            return data

    def clusters_get_vm_by_id_with_http_info(self, id, vm_id, **kwargs):  # noqa: E501
        """Get Virtual Machine Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/vms/{vmId}` endpoint retrieves information on a VM with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_vm_by_id_with_http_info(id, vm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param str vm_id: Specifies the ID assigned to a VM that belongs to the specified cluster. (required)
        :return: VirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_vm_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_vm_by_id`")  # noqa: E501
        # verify the required parameter 'vm_id' is set
        if ('vm_id' not in params or
                params['vm_id'] is None):
            raise ValueError("Missing the required parameter `vm_id` when calling `clusters_get_vm_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vm_id' in params:
            path_params['vmId'] = params['vm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/vms/{vmId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VirtualMachine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_vms(self, id, **kwargs):  # noqa: E501
        """Get Collection of Virtual Machines  # noqa: E501

        The HTTP GET request to the `/virtualMachines` endpoint retrieves a list of all virtual machines residing on a specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_vms(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameter](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_vms_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_vms_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_vms_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Virtual Machines  # noqa: E501

        The HTTP GET request to the `/virtualMachines` endpoint retrieves a list of all virtual machines residing on a specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_vms_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameter](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_vms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_vms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfVirtualMachine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_volume_group_by_id(self, id, volume_group_id, **kwargs):  # noqa: E501
        """Get Volume Group Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/volumeGroups/{volumeGroupId}` endpoint retrieves information on a volume group in the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_volume_group_by_id(id, volume_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param str volume_group_id: Specifies the ID assigned to a volume group in the Nutanix AHV environment. (required)
        :return: VolumeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_volume_group_by_id_with_http_info(id, volume_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_volume_group_by_id_with_http_info(id, volume_group_id, **kwargs)  # noqa: E501
            return data

    def clusters_get_volume_group_by_id_with_http_info(self, id, volume_group_id, **kwargs):  # noqa: E501
        """Get Volume Group Data  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/volumeGroups/{volumeGroupId}` endpoint retrieves information on a volume group in the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_volume_group_by_id_with_http_info(id, volume_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :param str volume_group_id: Specifies the ID assigned to a volume group in the Nutanix AHV environment. (required)
        :return: VolumeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'volume_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_volume_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_volume_group_by_id`")  # noqa: E501
        # verify the required parameter 'volume_group_id' is set
        if ('volume_group_id' not in params or
                params['volume_group_id'] is None):
            raise ValueError("Missing the required parameter `volume_group_id` when calling `clusters_get_volume_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'volume_group_id' in params:
            path_params['volumeGroupId'] = params['volume_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/volumeGroups/{volumeGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_get_volume_groups(self, id, **kwargs):  # noqa: E501
        """Get Collection of Volume Groups in Cluster  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/volumeGroups` endpoint retrieves a list of all volume groups configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_volume_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: list[VolumeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_get_volume_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_get_volume_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_get_volume_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Volume Groups in Cluster  # noqa: E501

        The HTTP GET request to the `/clusters/{id}/volumeGroups` endpoint retrieves a list of all volume groups configured in the specified Nutanix AHV cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_get_volume_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: list[VolumeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_volume_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_get_volume_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/volumeGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VolumeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_refresh_pds_async(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Protection Domains  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/protectionDomains/refresh` endpoint runs the infrastructure rescanning operation for protection domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_pds_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_refresh_pds_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_refresh_pds_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_refresh_pds_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Protection Domains  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/protectionDomains/refresh` endpoint runs the infrastructure rescanning operation for protection domains.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_pds_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_refresh_pds_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_refresh_pds_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/protectionDomains/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_refresh_vms_async(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Virtual Machines  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/vms/refreshAsync` endpoint runs the infrastructure rescanning operation for virtual machines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_vms_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_refresh_vms_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_refresh_vms_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_refresh_vms_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Virtual Machines  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/vms/refreshAsync` endpoint runs the infrastructure rescanning operation for virtual machines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_vms_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_refresh_vms_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_refresh_vms_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/vms/refreshAsync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_refresh_volume_groups(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Volume Groups  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/volumeGroups/refresh` endpoint runs the infrastructure rescanning operation for volume groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_volume_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_refresh_volume_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_refresh_volume_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_refresh_volume_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Infrastructure Rescan for Volume Groups  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/volumeGroups/refresh` endpoint runs the infrastructure rescanning operation for volume groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_refresh_volume_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_refresh_volume_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_refresh_volume_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/volumeGroups/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_rescan_snapshots(self, id, **kwargs):  # noqa: E501
        """Cluster Rescan for Snapshots  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/rescanSnapshots` endpoint runs the cluster rescanning operation for snapshots. Compatible snapshots are automatically imported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_rescan_snapshots(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_rescan_snapshots_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_rescan_snapshots_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def clusters_rescan_snapshots_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cluster Rescan for Snapshots  # noqa: E501

        The HTTP POST request to the `/clusters/{id}/rescanSnapshots` endpoint runs the cluster rescanning operation for snapshots. Compatible snapshots are automatically imported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_rescan_snapshots_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_rescan_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_rescan_snapshots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/rescanSnapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clusters_update_auto_protection_settings(self, body, id, **kwargs):  # noqa: E501
        """Modify Cluster Auto-Protection Settings  # noqa: E501

        The HTTP PUT request to the `/clusters/{id}/autoProtection` endpoint configures auto-protection settings for the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_update_auto_protection_settings(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoProtectionSettings body: Specifies auto-protection settings. (required)
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clusters_update_auto_protection_settings_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.clusters_update_auto_protection_settings_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def clusters_update_auto_protection_settings_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Modify Cluster Auto-Protection Settings  # noqa: E501

        The HTTP PUT request to the `/clusters/{id}/autoProtection` endpoint configures auto-protection settings for the specified cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clusters_update_auto_protection_settings_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoProtectionSettings body: Specifies auto-protection settings. (required)
        :param str id: Specifies the ID assigned to a cluster in the Nutanix AHV environment. To learn the ID, [get a collection of Nutanix AHV clusters](#tag/Clusters/operation/Clusters_Get) to which the backup appliance has access. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_update_auto_protection_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clusters_update_auto_protection_settings`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clusters_update_auto_protection_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/clusters/{id}/autoProtection', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
