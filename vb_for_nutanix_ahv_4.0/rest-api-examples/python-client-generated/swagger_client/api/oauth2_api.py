# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class Oauth2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def oauth2_logout(self, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        The HTTP POST request to the `/logout` endpoint performs the logout operation for an authorized user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth2_logout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth2_logout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.oauth2_logout_with_http_info(**kwargs)  # noqa: E501
            return data

    def oauth2_logout_with_http_info(self, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        The HTTP POST request to the `/logout` endpoint performs the logout operation for an authorized user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth2_logout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth2_logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/oauth2/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauth2_token(self, grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, **kwargs):  # noqa: E501
        """Request Authorization Tokens  # noqa: E501

        The HTTP POST request to the `/token` endpoint allows you to authorize your access to the Veeam Backup for Nutanix AHV REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth2_token(grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GrantType grant_type: (required)
        :param str user_name: (required)
        :param str password: (required)
        :param str refresh_token: (required)
        :param str updater_token: (required)
        :param bool long_lived_refresh_token: (required)
        :return: TokenModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth2_token_with_http_info(grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth2_token_with_http_info(grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, **kwargs)  # noqa: E501
            return data

    def oauth2_token_with_http_info(self, grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, **kwargs):  # noqa: E501
        """Request Authorization Tokens  # noqa: E501

        The HTTP POST request to the `/token` endpoint allows you to authorize your access to the Veeam Backup for Nutanix AHV REST API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth2_token_with_http_info(grant_type, user_name, password, refresh_token, updater_token, long_lived_refresh_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GrantType grant_type: (required)
        :param str user_name: (required)
        :param str password: (required)
        :param str refresh_token: (required)
        :param str updater_token: (required)
        :param bool long_lived_refresh_token: (required)
        :return: TokenModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_type', 'user_name', 'password', 'refresh_token', 'updater_token', 'long_lived_refresh_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth2_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grant_type' is set
        if ('grant_type' not in params or
                params['grant_type'] is None):
            raise ValueError("Missing the required parameter `grant_type` when calling `oauth2_token`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `oauth2_token`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `oauth2_token`")  # noqa: E501
        # verify the required parameter 'refresh_token' is set
        if ('refresh_token' not in params or
                params['refresh_token'] is None):
            raise ValueError("Missing the required parameter `refresh_token` when calling `oauth2_token`")  # noqa: E501
        # verify the required parameter 'updater_token' is set
        if ('updater_token' not in params or
                params['updater_token'] is None):
            raise ValueError("Missing the required parameter `updater_token` when calling `oauth2_token`")  # noqa: E501
        # verify the required parameter 'long_lived_refresh_token' is set
        if ('long_lived_refresh_token' not in params or
                params['long_lived_refresh_token'] is None):
            raise ValueError("Missing the required parameter `long_lived_refresh_token` when calling `oauth2_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grant_type' in params:
            form_params.append(('grantType', params['grant_type']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'refresh_token' in params:
            form_params.append(('refreshToken', params['refresh_token']))  # noqa: E501
        if 'updater_token' in params:
            form_params.append(('updaterToken', params['updater_token']))  # noqa: E501
        if 'long_lived_refresh_token' in params:
            form_params.append(('longLivedRefreshToken', params['long_lived_refresh_token']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/oauth2/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
