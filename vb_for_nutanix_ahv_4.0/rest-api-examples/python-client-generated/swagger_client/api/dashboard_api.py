# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dashboard_get_backup_repositories_report(self, **kwargs):  # noqa: E501
        """Get Collection of Available Backup Repositories  # noqa: E501

        The HTTP GET request to the `dashboard/backupRepositories` endpoint retrieves a list of available backup repositories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_backup_repositories_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfBackupRepositoryReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_backup_repositories_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_backup_repositories_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_backup_repositories_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get Collection of Available Backup Repositories  # noqa: E501

        The HTTP GET request to the `dashboard/backupRepositories` endpoint retrieves a list of available backup repositories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_backup_repositories_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfBackupRepositoryReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_backup_repositories_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/backupRepositories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfBackupRepositoryReportItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_protected_vms(self, **kwargs):  # noqa: E501
        """Get Number of Protected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/protectedVms` endpoint retrieves a number of VM protected with snapshots, a number of VM protected with backups and a number of unprotected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_protected_vms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProtectedVmsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_protected_vms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_protected_vms_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_protected_vms_with_http_info(self, **kwargs):  # noqa: E501
        """Get Number of Protected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/protectedVms` endpoint retrieves a number of VM protected with snapshots, a number of VM protected with backups and a number of unprotected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_protected_vms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ProtectedVmsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_protected_vms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/protectedVms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtectedVmsReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_protected_vms_in_cluster(self, **kwargs):  # noqa: E501
        """Get Collection of Protected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/protectedVmsInCluster` endpoint retrieves a list of protected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_protected_vms_in_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfProtectedVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_protected_vms_in_cluster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_protected_vms_in_cluster_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_protected_vms_in_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """Get Collection of Protected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/protectedVmsInCluster` endpoint retrieves a list of protected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_protected_vms_in_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfProtectedVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_protected_vms_in_cluster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/protectedVmsInCluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfProtectedVirtualMachine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_session_ratio_report(self, period, **kwargs):  # noqa: E501
        """Get Job Type Statistics  # noqa: E501

        The HTTP GET request to the `/dashboard/sessionRatio` endpoint retrieves a total number of job sessions and a number of successfully completed sessions during the specified period. The statistics is provided for each type of job: backup, snapshot and PD snapshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_session_ratio_report(period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportPeriod period: Specifies the period to collect the statistics. (required)
        :return: SessionRatioReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_session_ratio_report_with_http_info(period, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_session_ratio_report_with_http_info(period, **kwargs)  # noqa: E501
            return data

    def dashboard_get_session_ratio_report_with_http_info(self, period, **kwargs):  # noqa: E501
        """Get Job Type Statistics  # noqa: E501

        The HTTP GET request to the `/dashboard/sessionRatio` endpoint retrieves a total number of job sessions and a number of successfully completed sessions during the specified period. The statistics is provided for each type of job: backup, snapshot and PD snapshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_session_ratio_report_with_http_info(period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportPeriod period: Specifies the period to collect the statistics. (required)
        :return: SessionRatioReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_session_ratio_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `dashboard_get_session_ratio_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/sessionRatio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SessionRatioReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_sessions_summary_report(self, **kwargs):  # noqa: E501
        """Get Session Status Statistics for Last 24 Hours  # noqa: E501

        The HTTP GET request to the `/dashboard/sessionsSummary` endpoint retrieves a number of sessions started for data protection or disaster recovery operations during the past 24 hours that completed successfully, a number of sessions that completed with warnings, a number of sessions that completed with errors, and a number of sessions that are currently running.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_sessions_summary_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SessionsSummaryReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_sessions_summary_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_sessions_summary_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_sessions_summary_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get Session Status Statistics for Last 24 Hours  # noqa: E501

        The HTTP GET request to the `/dashboard/sessionsSummary` endpoint retrieves a number of sessions started for data protection or disaster recovery operations during the past 24 hours that completed successfully, a number of sessions that completed with warnings, a number of sessions that completed with errors, and a number of sessions that are currently running.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_sessions_summary_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SessionsSummaryReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_sessions_summary_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/sessionsSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SessionsSummaryReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_system_monitoring_info(self, metric_type, **kwargs):  # noqa: E501
        """Get Resource Usage Statistics  # noqa: E501

        The HTTP GET request to the `/dashboard/systemMonitoringInfo` endpoint retrieves CPU utilization, RAM consumption and storage usage on the backup appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_system_monitoring_info(metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SystemMetricType] metric_type: Returns only data on resources of the specified types. (required)
        :param datetime _from: Returns only data after the specified date and time.
        :param datetime to: Returns only data before the specified date and time.
        :param str report_interval: Returns data for periods defined by the specified time interval. By default, the interval equals 30 minutes.
        :return: SystemMonitoringInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_system_monitoring_info_with_http_info(metric_type, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_system_monitoring_info_with_http_info(metric_type, **kwargs)  # noqa: E501
            return data

    def dashboard_get_system_monitoring_info_with_http_info(self, metric_type, **kwargs):  # noqa: E501
        """Get Resource Usage Statistics  # noqa: E501

        The HTTP GET request to the `/dashboard/systemMonitoringInfo` endpoint retrieves CPU utilization, RAM consumption and storage usage on the backup appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_system_monitoring_info_with_http_info(metric_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SystemMetricType] metric_type: Returns only data on resources of the specified types. (required)
        :param datetime _from: Returns only data after the specified date and time.
        :param datetime to: Returns only data before the specified date and time.
        :param str report_interval: Returns data for periods defined by the specified time interval. By default, the interval equals 30 minutes.
        :return: SystemMonitoringInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric_type', '_from', 'to', 'report_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_system_monitoring_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric_type' is set
        if ('metric_type' not in params or
                params['metric_type'] is None):
            raise ValueError("Missing the required parameter `metric_type` when calling `dashboard_get_system_monitoring_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'report_interval' in params:
            query_params.append(('reportInterval', params['report_interval']))  # noqa: E501
        if 'metric_type' in params:
            query_params.append(('metricType', params['metric_type']))  # noqa: E501
            collection_formats['metricType'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/systemMonitoringInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemMonitoringInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_top_jobs_duration_report(self, job_mode, **kwargs):  # noqa: E501
        """Get Collection of Recent Job Sessions Duration  # noqa: E501

        The HTTP GET request to the `/dashboard/topJobsDuration` endpoint retrieves duration statistics for recent sessions of the specified job type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_top_jobs_duration_report(job_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobMode job_mode: Specifies the job type. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfTopJobsDurationReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_top_jobs_duration_report_with_http_info(job_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_top_jobs_duration_report_with_http_info(job_mode, **kwargs)  # noqa: E501
            return data

    def dashboard_get_top_jobs_duration_report_with_http_info(self, job_mode, **kwargs):  # noqa: E501
        """Get Collection of Recent Job Sessions Duration  # noqa: E501

        The HTTP GET request to the `/dashboard/topJobsDuration` endpoint retrieves duration statistics for recent sessions of the specified job type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_top_jobs_duration_report_with_http_info(job_mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobMode job_mode: Specifies the job type. (required)
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfTopJobsDurationReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_mode', 'offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_top_jobs_duration_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_mode' is set
        if ('job_mode' not in params or
                params['job_mode'] is None):
            raise ValueError("Missing the required parameter `job_mode` when calling `dashboard_get_top_jobs_duration_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'job_mode' in params:
            query_params.append(('jobMode', params['job_mode']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/topJobsDuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfTopJobsDurationReportItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_get_unprotected_vms_in_cluster(self, **kwargs):  # noqa: E501
        """Get Collection of Unprotected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/unprotectedVmsInCluster` endpoint retrieves a list of unprotected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_unprotected_vms_in_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfUnprotectedVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_get_unprotected_vms_in_cluster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_get_unprotected_vms_in_cluster_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_get_unprotected_vms_in_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """Get Collection of Unprotected VMs  # noqa: E501

        The HTTP GET request to the `/dashboard/unprotectedVmsInCluster` endpoint retrieves a list of unprotected VMs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_get_unprotected_vms_in_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfUnprotectedVirtualMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_get_unprotected_vms_in_cluster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/dashboard/unprotectedVmsInCluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfUnprotectedVirtualMachine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
