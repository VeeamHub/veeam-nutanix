# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RestorePointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def restore_points_delete_by_id(self, id, **kwargs):  # noqa: E501
        """Delete Restore Point  # noqa: E501

        The HTTP DELETE request to the `/restorePoints/{id}/delete` endpoint deletes a restore point with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_delete_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :param bool delete_from_server: Defines whether backup files will be deleted from backup repositories.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_delete_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_delete_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_delete_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Restore Point  # noqa: E501

        The HTTP DELETE request to the `/restorePoints/{id}/delete` endpoint deletes a restore point with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_delete_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :param bool delete_from_server: Defines whether backup files will be deleted from backup repositories.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'delete_from_server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_delete_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_delete_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'delete_from_server' in params:
            query_params.append(('deleteFromServer', params['delete_from_server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/{id}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_disk_restore(self, body, **kwargs):  # noqa: E501
        """Perform Disk Restore  # noqa: E501

        The HTTP POST request to the /restorePoints/diskRestore endpoint performs restore of disks using the specified restore settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_disk_restore(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskRestoreSettings body: (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_disk_restore_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_disk_restore_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def restore_points_disk_restore_with_http_info(self, body, **kwargs):  # noqa: E501
        """Perform Disk Restore  # noqa: E501

        The HTTP POST request to the /restorePoints/diskRestore endpoint performs restore of disks using the specified restore settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_disk_restore_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskRestoreSettings body: (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_disk_restore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `restore_points_disk_restore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/diskRestore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get(self, **kwargs):  # noqa: E501
        """Get VM Restore Points  # noqa: E501

        The HTTP GET request to the `/restorePoints` endpoint retrieves a list of all restore points of a VM in Veeam Backup for Nutanix AHV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: ID of a protected VM assigned in the Nutanix environment.
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfRestorePointBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def restore_points_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get VM Restore Points  # noqa: E501

        The HTTP GET request to the `/restorePoints` endpoint retrieves a list of all restore points of a VM in Veeam Backup for Nutanix AHV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vm_id: ID of a protected VM assigned in the Nutanix environment.
        :param int offset: Excludes from a response the first N items of a resource collection.
        :param int limit: Specifies the maximum number of items of a resource collection to return in a response.
        :param FilterParameter filter: Specifies the criteria for items to be returned in a response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Filter Parameters](https://helpcenter.veeam.com/docs/van/rest/filter.html?ver=40).
        :param SortParameter sort: Specifies the order of items in the response. For more information, see the Veeam Backup for Nutanix AHV REST API Reference Overview, section [Sort Parameters](https://helpcenter.veeam.com/docs/van/rest/sort.html?ver=40).
        :return: PageOfRestorePointBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vm_id', 'offset', 'limit', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vm_id' in params:
            query_params.append(('vmId', params['vm_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfRestorePointBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_backup_by_id(self, id, **kwargs):  # noqa: E501
        """Get Backup Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/backups/{id}` endpoint retrieves information on a backup with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_backup_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: BackupRestorePoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_backup_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_backup_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_backup_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Backup Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/backups/{id}` endpoint retrieves information on a backup with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_backup_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: BackupRestorePoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_backup_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_backup_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/backups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupRestorePoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_backup_snapshot_by_id(self, id, **kwargs):  # noqa: E501
        """Get Backup Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/backupSnapshots/{id}` endpoint retrieves information on a backup snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_backup_snapshot_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a backup snapshot in Veeam Backup and Replication. (required)
        :return: BackupSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_backup_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_backup_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_backup_snapshot_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Backup Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/backupSnapshots/{id}` endpoint retrieves information on a backup snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_backup_snapshot_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a backup snapshot in Veeam Backup and Replication. (required)
        :return: BackupSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_backup_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_backup_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/backupSnapshots/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_disks_from_restore_point(self, id, **kwargs):  # noqa: E501
        """Get Collection of Disks From Restore Point  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}/disks` endpoint retrieves a list of disks from the specified VM restore point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_disks_from_restore_point(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: list[Disk]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_disks_from_restore_point_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_disks_from_restore_point_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_disks_from_restore_point_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Disks From Restore Point  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}/disks` endpoint retrieves a list of disks from the specified VM restore point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_disks_from_restore_point_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: list[Disk]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_disks_from_restore_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_disks_from_restore_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/{id}/disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Disk]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_network_adapters_from_restore_point(self, id, **kwargs):  # noqa: E501
        """Get Collection of Network Adapters From Restore Point  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}/networkAdapters` endpoint retrieves a list of network adapters from metadata of a restore point with the specified ID. The information can be provided for backups and backup snapshot only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_network_adapters_from_restore_point(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: list[NetworkAdapter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_network_adapters_from_restore_point_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_network_adapters_from_restore_point_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_network_adapters_from_restore_point_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Collection of Network Adapters From Restore Point  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}/networkAdapters` endpoint retrieves a list of network adapters from metadata of a restore point with the specified ID. The information can be provided for backups and backup snapshot only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_network_adapters_from_restore_point_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: list[NetworkAdapter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_network_adapters_from_restore_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_network_adapters_from_restore_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/{id}/networkAdapters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NetworkAdapter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_protection_domain_snapshot_by_id(self, id, **kwargs):  # noqa: E501
        """Get Protection Domain Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/protectionDomainSnapshots/{id}` endpoint retrieves information on a protection domain snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_protection_domain_snapshot_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a protection domain snapshot in Nutanix AHV environment. (required)
        :return: ProtectionDomainSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_protection_domain_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_protection_domain_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_protection_domain_snapshot_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Protection Domain Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/protectionDomainSnapshots/{id}` endpoint retrieves information on a protection domain snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_protection_domain_snapshot_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a protection domain snapshot in Nutanix AHV environment. (required)
        :return: ProtectionDomainSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_protection_domain_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_protection_domain_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/protectionDomainSnapshots/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtectionDomainSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_restore_point_by_id(self, id, **kwargs):  # noqa: E501
        """Get Restore Point Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}` endpoint retrieves information on a restore point with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_restore_point_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: RestorePointBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_restore_point_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_restore_point_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_restore_point_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Restore Point Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/{id}` endpoint retrieves information on a restore point with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_restore_point_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a restore point in Veeam Backup and Replication. (required)
        :return: RestorePointBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_restore_point_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_restore_point_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestorePointBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_get_user_snapshot_by_id(self, id, **kwargs):  # noqa: E501
        """Get User Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/userSnapshots/{id}` endpoint retrieves information on a user snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_user_snapshot_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a user snapshot in Nutanix AHV environment. (required)
        :return: UserSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_get_user_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_get_user_snapshot_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restore_points_get_user_snapshot_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get User Snapshot Data  # noqa: E501

        The HTTP GET request to the `/restorePoints/userSnapshots/{id}` endpoint retrieves information on a user snapshot with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_get_user_snapshot_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: System ID assigned to a user snapshot in Nutanix AHV environment. (required)
        :return: UserSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_get_user_snapshot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restore_points_get_user_snapshot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/userSnapshots/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_points_restore(self, body, **kwargs):  # noqa: E501
        """Perform VM Restore  # noqa: E501

        The HTTP POST request to the `/restorePoints/restore` endpoint performs restore of an entire VM from a restore point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_restore(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestoreSettings body: (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_points_restore_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_points_restore_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def restore_points_restore_with_http_info(self, body, **kwargs):  # noqa: E501
        """Perform VM Restore  # noqa: E501

        The HTTP POST request to the `/restorePoints/restore` endpoint performs restore of an entire VM from a restore point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_points_restore_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RestoreSettings body: (required)
        :return: AsyncTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_points_restore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `restore_points_restore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/restorePoints/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
