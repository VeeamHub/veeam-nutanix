# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updates_notify': 'bool',
        'disk_space_notify': 'bool',
        'disk_space_percents': 'int',
        'cpu_usage_notify': 'bool',
        'cpu_usage_percents': 'int',
        'memory_usage_notify': 'bool',
        'memory_usage_percents': 'int',
        'id': 'str'
    }

    attribute_map = {
        'updates_notify': 'updatesNotify',
        'disk_space_notify': 'diskSpaceNotify',
        'disk_space_percents': 'diskSpacePercents',
        'cpu_usage_notify': 'cpuUsageNotify',
        'cpu_usage_percents': 'cpuUsagePercents',
        'memory_usage_notify': 'memoryUsageNotify',
        'memory_usage_percents': 'memoryUsagePercents',
        'id': 'id'
    }

    def __init__(self, updates_notify=None, disk_space_notify=None, disk_space_percents=None, cpu_usage_notify=None, cpu_usage_percents=None, memory_usage_notify=None, memory_usage_percents=None, id=None):  # noqa: E501
        """NotificationsSettings - a model defined in Swagger"""  # noqa: E501
        self._updates_notify = None
        self._disk_space_notify = None
        self._disk_space_percents = None
        self._cpu_usage_notify = None
        self._cpu_usage_percents = None
        self._memory_usage_notify = None
        self._memory_usage_percents = None
        self._id = None
        self.discriminator = None
        if updates_notify is not None:
            self.updates_notify = updates_notify
        if disk_space_notify is not None:
            self.disk_space_notify = disk_space_notify
        if disk_space_percents is not None:
            self.disk_space_percents = disk_space_percents
        if cpu_usage_notify is not None:
            self.cpu_usage_notify = cpu_usage_notify
        if cpu_usage_percents is not None:
            self.cpu_usage_percents = cpu_usage_percents
        if memory_usage_notify is not None:
            self.memory_usage_notify = memory_usage_notify
        if memory_usage_percents is not None:
            self.memory_usage_percents = memory_usage_percents
        if id is not None:
            self.id = id

    @property
    def updates_notify(self):
        """Gets the updates_notify of this NotificationsSettings.  # noqa: E501


        :return: The updates_notify of this NotificationsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._updates_notify

    @updates_notify.setter
    def updates_notify(self, updates_notify):
        """Sets the updates_notify of this NotificationsSettings.


        :param updates_notify: The updates_notify of this NotificationsSettings.  # noqa: E501
        :type: bool
        """

        self._updates_notify = updates_notify

    @property
    def disk_space_notify(self):
        """Gets the disk_space_notify of this NotificationsSettings.  # noqa: E501


        :return: The disk_space_notify of this NotificationsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._disk_space_notify

    @disk_space_notify.setter
    def disk_space_notify(self, disk_space_notify):
        """Sets the disk_space_notify of this NotificationsSettings.


        :param disk_space_notify: The disk_space_notify of this NotificationsSettings.  # noqa: E501
        :type: bool
        """

        self._disk_space_notify = disk_space_notify

    @property
    def disk_space_percents(self):
        """Gets the disk_space_percents of this NotificationsSettings.  # noqa: E501


        :return: The disk_space_percents of this NotificationsSettings.  # noqa: E501
        :rtype: int
        """
        return self._disk_space_percents

    @disk_space_percents.setter
    def disk_space_percents(self, disk_space_percents):
        """Sets the disk_space_percents of this NotificationsSettings.


        :param disk_space_percents: The disk_space_percents of this NotificationsSettings.  # noqa: E501
        :type: int
        """

        self._disk_space_percents = disk_space_percents

    @property
    def cpu_usage_notify(self):
        """Gets the cpu_usage_notify of this NotificationsSettings.  # noqa: E501


        :return: The cpu_usage_notify of this NotificationsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._cpu_usage_notify

    @cpu_usage_notify.setter
    def cpu_usage_notify(self, cpu_usage_notify):
        """Sets the cpu_usage_notify of this NotificationsSettings.


        :param cpu_usage_notify: The cpu_usage_notify of this NotificationsSettings.  # noqa: E501
        :type: bool
        """

        self._cpu_usage_notify = cpu_usage_notify

    @property
    def cpu_usage_percents(self):
        """Gets the cpu_usage_percents of this NotificationsSettings.  # noqa: E501


        :return: The cpu_usage_percents of this NotificationsSettings.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_percents

    @cpu_usage_percents.setter
    def cpu_usage_percents(self, cpu_usage_percents):
        """Sets the cpu_usage_percents of this NotificationsSettings.


        :param cpu_usage_percents: The cpu_usage_percents of this NotificationsSettings.  # noqa: E501
        :type: int
        """

        self._cpu_usage_percents = cpu_usage_percents

    @property
    def memory_usage_notify(self):
        """Gets the memory_usage_notify of this NotificationsSettings.  # noqa: E501


        :return: The memory_usage_notify of this NotificationsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._memory_usage_notify

    @memory_usage_notify.setter
    def memory_usage_notify(self, memory_usage_notify):
        """Sets the memory_usage_notify of this NotificationsSettings.


        :param memory_usage_notify: The memory_usage_notify of this NotificationsSettings.  # noqa: E501
        :type: bool
        """

        self._memory_usage_notify = memory_usage_notify

    @property
    def memory_usage_percents(self):
        """Gets the memory_usage_percents of this NotificationsSettings.  # noqa: E501


        :return: The memory_usage_percents of this NotificationsSettings.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage_percents

    @memory_usage_percents.setter
    def memory_usage_percents(self, memory_usage_percents):
        """Sets the memory_usage_percents of this NotificationsSettings.


        :param memory_usage_percents: The memory_usage_percents of this NotificationsSettings.  # noqa: E501
        :type: int
        """

        self._memory_usage_percents = memory_usage_percents

    @property
    def id(self):
        """Gets the id of this NotificationsSettings.  # noqa: E501


        :return: The id of this NotificationsSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationsSettings.


        :param id: The id of this NotificationsSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
