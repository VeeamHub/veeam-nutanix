# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkAdapter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'network_id': 'str',
        'network_name': 'str',
        'ip_addresses': 'list[str]',
        'mac_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'network_id': 'networkId',
        'network_name': 'networkName',
        'ip_addresses': 'ipAddresses',
        'mac_address': 'macAddress'
    }

    def __init__(self, id=None, network_id=None, network_name=None, ip_addresses=None, mac_address=None):  # noqa: E501
        """NetworkAdapter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._network_id = None
        self._network_name = None
        self._ip_addresses = None
        self._mac_address = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if network_id is not None:
            self.network_id = network_id
        if network_name is not None:
            self.network_name = network_name
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if mac_address is not None:
            self.mac_address = mac_address

    @property
    def id(self):
        """Gets the id of this NetworkAdapter.  # noqa: E501

        ID of the VM network adapter assigned in the Nutanix AHV environment.  # noqa: E501

        :return: The id of this NetworkAdapter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkAdapter.

        ID of the VM network adapter assigned in the Nutanix AHV environment.  # noqa: E501

        :param id: The id of this NetworkAdapter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def network_id(self):
        """Gets the network_id of this NetworkAdapter.  # noqa: E501

        ID of the AHV Nutanix network to which the VM is connected using the network adapter.  # noqa: E501

        :return: The network_id of this NetworkAdapter.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this NetworkAdapter.

        ID of the AHV Nutanix network to which the VM is connected using the network adapter.  # noqa: E501

        :param network_id: The network_id of this NetworkAdapter.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def network_name(self):
        """Gets the network_name of this NetworkAdapter.  # noqa: E501

        Name of the AHV Nutanix network to which the VM is connected using the network adapter.  # noqa: E501

        :return: The network_name of this NetworkAdapter.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this NetworkAdapter.

        Name of the AHV Nutanix network to which the VM is connected using the network adapter.  # noqa: E501

        :param network_name: The network_name of this NetworkAdapter.  # noqa: E501
        :type: str
        """

        self._network_name = network_name

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NetworkAdapter.  # noqa: E501

        IP addresses configured on the network adapter.  # noqa: E501

        :return: The ip_addresses of this NetworkAdapter.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NetworkAdapter.

        IP addresses configured on the network adapter.  # noqa: E501

        :param ip_addresses: The ip_addresses of this NetworkAdapter.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkAdapter.  # noqa: E501

        MAC address of the network adapter.  # noqa: E501

        :return: The mac_address of this NetworkAdapter.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkAdapter.

        MAC address of the network adapter.  # noqa: E501

        :param mac_address: The mac_address of this NetworkAdapter.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkAdapter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkAdapter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
