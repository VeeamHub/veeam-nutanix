# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailNotificationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'email_notification_options': 'list[EmailNotificationOption]',
        'email_message_settings': 'EmailMessageSettings',
        'smtp_settings': 'SmtpSettings'
    }

    attribute_map = {
        'enabled': 'enabled',
        'email_notification_options': 'emailNotificationOptions',
        'email_message_settings': 'emailMessageSettings',
        'smtp_settings': 'smtpSettings'
    }

    def __init__(self, enabled=None, email_notification_options=None, email_message_settings=None, smtp_settings=None):  # noqa: E501
        """EmailNotificationSettings - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._email_notification_options = None
        self._email_message_settings = None
        self._smtp_settings = None
        self.discriminator = None
        self.enabled = enabled
        self.email_notification_options = email_notification_options
        self.email_message_settings = email_message_settings
        self.smtp_settings = smtp_settings

    @property
    def enabled(self):
        """Gets the enabled of this EmailNotificationSettings.  # noqa: E501

        Defines whether email notifications are enabled. Default value is *false*.  # noqa: E501

        :return: The enabled of this EmailNotificationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EmailNotificationSettings.

        Defines whether email notifications are enabled. Default value is *false*.  # noqa: E501

        :param enabled: The enabled of this EmailNotificationSettings.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def email_notification_options(self):
        """Gets the email_notification_options of this EmailNotificationSettings.  # noqa: E501


        :return: The email_notification_options of this EmailNotificationSettings.  # noqa: E501
        :rtype: list[EmailNotificationOption]
        """
        return self._email_notification_options

    @email_notification_options.setter
    def email_notification_options(self, email_notification_options):
        """Sets the email_notification_options of this EmailNotificationSettings.


        :param email_notification_options: The email_notification_options of this EmailNotificationSettings.  # noqa: E501
        :type: list[EmailNotificationOption]
        """
        if email_notification_options is None:
            raise ValueError("Invalid value for `email_notification_options`, must not be `None`")  # noqa: E501

        self._email_notification_options = email_notification_options

    @property
    def email_message_settings(self):
        """Gets the email_message_settings of this EmailNotificationSettings.  # noqa: E501


        :return: The email_message_settings of this EmailNotificationSettings.  # noqa: E501
        :rtype: EmailMessageSettings
        """
        return self._email_message_settings

    @email_message_settings.setter
    def email_message_settings(self, email_message_settings):
        """Sets the email_message_settings of this EmailNotificationSettings.


        :param email_message_settings: The email_message_settings of this EmailNotificationSettings.  # noqa: E501
        :type: EmailMessageSettings
        """
        if email_message_settings is None:
            raise ValueError("Invalid value for `email_message_settings`, must not be `None`")  # noqa: E501

        self._email_message_settings = email_message_settings

    @property
    def smtp_settings(self):
        """Gets the smtp_settings of this EmailNotificationSettings.  # noqa: E501


        :return: The smtp_settings of this EmailNotificationSettings.  # noqa: E501
        :rtype: SmtpSettings
        """
        return self._smtp_settings

    @smtp_settings.setter
    def smtp_settings(self, smtp_settings):
        """Sets the smtp_settings of this EmailNotificationSettings.


        :param smtp_settings: The smtp_settings of this EmailNotificationSettings.  # noqa: E501
        :type: SmtpSettings
        """
        if smtp_settings is None:
            raise ValueError("Invalid value for `smtp_settings`, must not be `None`")  # noqa: E501

        self._smtp_settings = smtp_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailNotificationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailNotificationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
