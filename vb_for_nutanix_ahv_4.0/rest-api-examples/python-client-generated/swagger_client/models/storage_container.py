# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StorageContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'max_capacity': 'int',
        'reserved_capacity': 'int',
        'used_space': 'int',
        'free_space': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'max_capacity': 'maxCapacity',
        'reserved_capacity': 'reservedCapacity',
        'used_space': 'usedSpace',
        'free_space': 'freeSpace'
    }

    def __init__(self, id=None, name=None, max_capacity=None, reserved_capacity=None, used_space=None, free_space=None):  # noqa: E501
        """StorageContainer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._max_capacity = None
        self._reserved_capacity = None
        self._used_space = None
        self._free_space = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if max_capacity is not None:
            self.max_capacity = max_capacity
        if reserved_capacity is not None:
            self.reserved_capacity = reserved_capacity
        if used_space is not None:
            self.used_space = used_space
        if free_space is not None:
            self.free_space = free_space

    @property
    def id(self):
        """Gets the id of this StorageContainer.  # noqa: E501

        ID assigned to a storage container assigned in the Nutanix AHV environment.  # noqa: E501

        :return: The id of this StorageContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageContainer.

        ID assigned to a storage container assigned in the Nutanix AHV environment.  # noqa: E501

        :param id: The id of this StorageContainer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StorageContainer.  # noqa: E501

        Name of the storage container.  # noqa: E501

        :return: The name of this StorageContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageContainer.

        Name of the storage container.  # noqa: E501

        :param name: The name of this StorageContainer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def max_capacity(self):
        """Gets the max_capacity of this StorageContainer.  # noqa: E501

        Total storage capacity of the storage container (in bytes).  # noqa: E501

        :return: The max_capacity of this StorageContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this StorageContainer.

        Total storage capacity of the storage container (in bytes).  # noqa: E501

        :param max_capacity: The max_capacity of this StorageContainer.  # noqa: E501
        :type: int
        """

        self._max_capacity = max_capacity

    @property
    def reserved_capacity(self):
        """Gets the reserved_capacity of this StorageContainer.  # noqa: E501

        Reserved storage capacity that cannot be used by other storage container in a storage pool (in bytes).  # noqa: E501

        :return: The reserved_capacity of this StorageContainer.  # noqa: E501
        :rtype: int
        """
        return self._reserved_capacity

    @reserved_capacity.setter
    def reserved_capacity(self, reserved_capacity):
        """Sets the reserved_capacity of this StorageContainer.

        Reserved storage capacity that cannot be used by other storage container in a storage pool (in bytes).  # noqa: E501

        :param reserved_capacity: The reserved_capacity of this StorageContainer.  # noqa: E501
        :type: int
        """

        self._reserved_capacity = reserved_capacity

    @property
    def used_space(self):
        """Gets the used_space of this StorageContainer.  # noqa: E501

        Used space in the storage container (in bytes).  # noqa: E501

        :return: The used_space of this StorageContainer.  # noqa: E501
        :rtype: int
        """
        return self._used_space

    @used_space.setter
    def used_space(self, used_space):
        """Sets the used_space of this StorageContainer.

        Used space in the storage container (in bytes).  # noqa: E501

        :param used_space: The used_space of this StorageContainer.  # noqa: E501
        :type: int
        """

        self._used_space = used_space

    @property
    def free_space(self):
        """Gets the free_space of this StorageContainer.  # noqa: E501

        Free space in the storage container (in bytes).  # noqa: E501

        :return: The free_space of this StorageContainer.  # noqa: E501
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """Sets the free_space of this StorageContainer.

        Free space in the storage container (in bytes).  # noqa: E501

        :param free_space: The free_space of this StorageContainer.  # noqa: E501
        :type: int
        """

        self._free_space = free_space

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
