# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionRatioReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backups': 'int',
        'backups_total': 'int',
        'snapshots': 'int',
        'snapshots_total': 'int',
        'pd_snapshots': 'int',
        'pd_snapshots_total': 'int'
    }

    attribute_map = {
        'backups': 'backups',
        'backups_total': 'backupsTotal',
        'snapshots': 'snapshots',
        'snapshots_total': 'snapshotsTotal',
        'pd_snapshots': 'pdSnapshots',
        'pd_snapshots_total': 'pdSnapshotsTotal'
    }

    def __init__(self, backups=None, backups_total=None, snapshots=None, snapshots_total=None, pd_snapshots=None, pd_snapshots_total=None):  # noqa: E501
        """SessionRatioReport - a model defined in Swagger"""  # noqa: E501
        self._backups = None
        self._backups_total = None
        self._snapshots = None
        self._snapshots_total = None
        self._pd_snapshots = None
        self._pd_snapshots_total = None
        self.discriminator = None
        self.backups = backups
        self.backups_total = backups_total
        self.snapshots = snapshots
        self.snapshots_total = snapshots_total
        self.pd_snapshots = pd_snapshots
        self.pd_snapshots_total = pd_snapshots_total

    @property
    def backups(self):
        """Gets the backups of this SessionRatioReport.  # noqa: E501

        Number of successfully completed backup jobs.  # noqa: E501

        :return: The backups of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this SessionRatioReport.

        Number of successfully completed backup jobs.  # noqa: E501

        :param backups: The backups of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if backups is None:
            raise ValueError("Invalid value for `backups`, must not be `None`")  # noqa: E501

        self._backups = backups

    @property
    def backups_total(self):
        """Gets the backups_total of this SessionRatioReport.  # noqa: E501

        Total number of completed backup jobs.  # noqa: E501

        :return: The backups_total of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._backups_total

    @backups_total.setter
    def backups_total(self, backups_total):
        """Sets the backups_total of this SessionRatioReport.

        Total number of completed backup jobs.  # noqa: E501

        :param backups_total: The backups_total of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if backups_total is None:
            raise ValueError("Invalid value for `backups_total`, must not be `None`")  # noqa: E501

        self._backups_total = backups_total

    @property
    def snapshots(self):
        """Gets the snapshots of this SessionRatioReport.  # noqa: E501

        Number of successfully completed snapshot jobs.  # noqa: E501

        :return: The snapshots of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this SessionRatioReport.

        Number of successfully completed snapshot jobs.  # noqa: E501

        :param snapshots: The snapshots of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if snapshots is None:
            raise ValueError("Invalid value for `snapshots`, must not be `None`")  # noqa: E501

        self._snapshots = snapshots

    @property
    def snapshots_total(self):
        """Gets the snapshots_total of this SessionRatioReport.  # noqa: E501

        Total number of completed snapshot jobs.  # noqa: E501

        :return: The snapshots_total of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._snapshots_total

    @snapshots_total.setter
    def snapshots_total(self, snapshots_total):
        """Sets the snapshots_total of this SessionRatioReport.

        Total number of completed snapshot jobs.  # noqa: E501

        :param snapshots_total: The snapshots_total of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if snapshots_total is None:
            raise ValueError("Invalid value for `snapshots_total`, must not be `None`")  # noqa: E501

        self._snapshots_total = snapshots_total

    @property
    def pd_snapshots(self):
        """Gets the pd_snapshots of this SessionRatioReport.  # noqa: E501

        Number of successfully completed protection domain snapshot jobs.  # noqa: E501

        :return: The pd_snapshots of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._pd_snapshots

    @pd_snapshots.setter
    def pd_snapshots(self, pd_snapshots):
        """Sets the pd_snapshots of this SessionRatioReport.

        Number of successfully completed protection domain snapshot jobs.  # noqa: E501

        :param pd_snapshots: The pd_snapshots of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if pd_snapshots is None:
            raise ValueError("Invalid value for `pd_snapshots`, must not be `None`")  # noqa: E501

        self._pd_snapshots = pd_snapshots

    @property
    def pd_snapshots_total(self):
        """Gets the pd_snapshots_total of this SessionRatioReport.  # noqa: E501

        Total number of completed protection domain snapshot jobs.  # noqa: E501

        :return: The pd_snapshots_total of this SessionRatioReport.  # noqa: E501
        :rtype: int
        """
        return self._pd_snapshots_total

    @pd_snapshots_total.setter
    def pd_snapshots_total(self, pd_snapshots_total):
        """Sets the pd_snapshots_total of this SessionRatioReport.

        Total number of completed protection domain snapshot jobs.  # noqa: E501

        :param pd_snapshots_total: The pd_snapshots_total of this SessionRatioReport.  # noqa: E501
        :type: int
        """
        if pd_snapshots_total is None:
            raise ValueError("Invalid value for `pd_snapshots_total`, must not be `None`")  # noqa: E501

        self._pd_snapshots_total = pd_snapshots_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionRatioReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionRatioReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
