# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'enable_dhcp': 'bool',
        'ip_address': 'str',
        'subnet_mask': 'str',
        'default_gateway': 'str',
        'enable_auto_dns': 'bool',
        'dns_servers': 'list[str]'
    }

    attribute_map = {
        'host_name': 'hostName',
        'enable_dhcp': 'enableDhcp',
        'ip_address': 'ipAddress',
        'subnet_mask': 'subnetMask',
        'default_gateway': 'defaultGateway',
        'enable_auto_dns': 'enableAutoDns',
        'dns_servers': 'dnsServers'
    }

    def __init__(self, host_name=None, enable_dhcp=None, ip_address=None, subnet_mask=None, default_gateway=None, enable_auto_dns=None, dns_servers=None):  # noqa: E501
        """NetworkSettings - a model defined in Swagger"""  # noqa: E501
        self._host_name = None
        self._enable_dhcp = None
        self._ip_address = None
        self._subnet_mask = None
        self._default_gateway = None
        self._enable_auto_dns = None
        self._dns_servers = None
        self.discriminator = None
        if host_name is not None:
            self.host_name = host_name
        if enable_dhcp is not None:
            self.enable_dhcp = enable_dhcp
        if ip_address is not None:
            self.ip_address = ip_address
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if enable_auto_dns is not None:
            self.enable_auto_dns = enable_auto_dns
        if dns_servers is not None:
            self.dns_servers = dns_servers

    @property
    def host_name(self):
        """Gets the host_name of this NetworkSettings.  # noqa: E501

        Specifies a host name of the backup appliance.  # noqa: E501

        :return: The host_name of this NetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this NetworkSettings.

        Specifies a host name of the backup appliance.  # noqa: E501

        :param host_name: The host_name of this NetworkSettings.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def enable_dhcp(self):
        """Gets the enable_dhcp of this NetworkSettings.  # noqa: E501

        Defines whether the backup appliance automatically obtains an IP address from a DHCP server.  # noqa: E501

        :return: The enable_dhcp of this NetworkSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dhcp

    @enable_dhcp.setter
    def enable_dhcp(self, enable_dhcp):
        """Sets the enable_dhcp of this NetworkSettings.

        Defines whether the backup appliance automatically obtains an IP address from a DHCP server.  # noqa: E501

        :param enable_dhcp: The enable_dhcp of this NetworkSettings.  # noqa: E501
        :type: bool
        """

        self._enable_dhcp = enable_dhcp

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkSettings.  # noqa: E501

        Specifies an IP address of the backup appliance.  # noqa: E501

        :return: The ip_address of this NetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkSettings.

        Specifies an IP address of the backup appliance.  # noqa: E501

        :param ip_address: The ip_address of this NetworkSettings.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this NetworkSettings.  # noqa: E501

        Specifies a subnet mask of the network.  # noqa: E501

        :return: The subnet_mask of this NetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this NetworkSettings.

        Specifies a subnet mask of the network.  # noqa: E501

        :param subnet_mask: The subnet_mask of this NetworkSettings.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def default_gateway(self):
        """Gets the default_gateway of this NetworkSettings.  # noqa: E501

        Specifies a default gateway used in the network.  # noqa: E501

        :return: The default_gateway of this NetworkSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this NetworkSettings.

        Specifies a default gateway used in the network.  # noqa: E501

        :param default_gateway: The default_gateway of this NetworkSettings.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def enable_auto_dns(self):
        """Gets the enable_auto_dns of this NetworkSettings.  # noqa: E501

        Defines whether the backup appliance automatically obtains DNS server IP addresses from a DHCP server.  # noqa: E501

        :return: The enable_auto_dns of this NetworkSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_dns

    @enable_auto_dns.setter
    def enable_auto_dns(self, enable_auto_dns):
        """Sets the enable_auto_dns of this NetworkSettings.

        Defines whether the backup appliance automatically obtains DNS server IP addresses from a DHCP server.  # noqa: E501

        :param enable_auto_dns: The enable_auto_dns of this NetworkSettings.  # noqa: E501
        :type: bool
        """

        self._enable_auto_dns = enable_auto_dns

    @property
    def dns_servers(self):
        """Gets the dns_servers of this NetworkSettings.  # noqa: E501

        Specifies IP addresses of DNS servers that the backup appliance uses.  # noqa: E501

        :return: The dns_servers of this NetworkSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this NetworkSettings.

        Specifies IP addresses of DNS servers that the backup appliance uses.  # noqa: E501

        :param dns_servers: The dns_servers of this NetworkSettings.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
