# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiskRestoreSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_vm_id': 'str',
        'target_vm_id': 'str',
        'restore_point_id': 'str',
        'disk_settings': 'list[DiskSettingsForRestore]',
        'reason': 'str',
        'power_on_vm_after_restore': 'bool'
    }

    attribute_map = {
        'source_vm_id': 'sourceVmId',
        'target_vm_id': 'targetVmId',
        'restore_point_id': 'restorePointId',
        'disk_settings': 'diskSettings',
        'reason': 'reason',
        'power_on_vm_after_restore': 'powerOnVmAfterRestore'
    }

    def __init__(self, source_vm_id=None, target_vm_id=None, restore_point_id=None, disk_settings=None, reason=None, power_on_vm_after_restore=None):  # noqa: E501
        """DiskRestoreSettings - a model defined in Swagger"""  # noqa: E501
        self._source_vm_id = None
        self._target_vm_id = None
        self._restore_point_id = None
        self._disk_settings = None
        self._reason = None
        self._power_on_vm_after_restore = None
        self.discriminator = None
        self.source_vm_id = source_vm_id
        self.target_vm_id = target_vm_id
        self.restore_point_id = restore_point_id
        self.disk_settings = disk_settings
        if reason is not None:
            self.reason = reason
        if power_on_vm_after_restore is not None:
            self.power_on_vm_after_restore = power_on_vm_after_restore

    @property
    def source_vm_id(self):
        """Gets the source_vm_id of this DiskRestoreSettings.  # noqa: E501

        ID of a source VM to restore from.  # noqa: E501

        :return: The source_vm_id of this DiskRestoreSettings.  # noqa: E501
        :rtype: str
        """
        return self._source_vm_id

    @source_vm_id.setter
    def source_vm_id(self, source_vm_id):
        """Sets the source_vm_id of this DiskRestoreSettings.

        ID of a source VM to restore from.  # noqa: E501

        :param source_vm_id: The source_vm_id of this DiskRestoreSettings.  # noqa: E501
        :type: str
        """
        if source_vm_id is None:
            raise ValueError("Invalid value for `source_vm_id`, must not be `None`")  # noqa: E501

        self._source_vm_id = source_vm_id

    @property
    def target_vm_id(self):
        """Gets the target_vm_id of this DiskRestoreSettings.  # noqa: E501

        ID of a target VM to restore to.  # noqa: E501

        :return: The target_vm_id of this DiskRestoreSettings.  # noqa: E501
        :rtype: str
        """
        return self._target_vm_id

    @target_vm_id.setter
    def target_vm_id(self, target_vm_id):
        """Sets the target_vm_id of this DiskRestoreSettings.

        ID of a target VM to restore to.  # noqa: E501

        :param target_vm_id: The target_vm_id of this DiskRestoreSettings.  # noqa: E501
        :type: str
        """
        if target_vm_id is None:
            raise ValueError("Invalid value for `target_vm_id`, must not be `None`")  # noqa: E501

        self._target_vm_id = target_vm_id

    @property
    def restore_point_id(self):
        """Gets the restore_point_id of this DiskRestoreSettings.  # noqa: E501

        System ID assigned to the restore point in Veeam Backup and Replication.  # noqa: E501

        :return: The restore_point_id of this DiskRestoreSettings.  # noqa: E501
        :rtype: str
        """
        return self._restore_point_id

    @restore_point_id.setter
    def restore_point_id(self, restore_point_id):
        """Sets the restore_point_id of this DiskRestoreSettings.

        System ID assigned to the restore point in Veeam Backup and Replication.  # noqa: E501

        :param restore_point_id: The restore_point_id of this DiskRestoreSettings.  # noqa: E501
        :type: str
        """
        if restore_point_id is None:
            raise ValueError("Invalid value for `restore_point_id`, must not be `None`")  # noqa: E501

        self._restore_point_id = restore_point_id

    @property
    def disk_settings(self):
        """Gets the disk_settings of this DiskRestoreSettings.  # noqa: E501

        List of disk settings to restore (used only for disk restore)  # noqa: E501

        :return: The disk_settings of this DiskRestoreSettings.  # noqa: E501
        :rtype: list[DiskSettingsForRestore]
        """
        return self._disk_settings

    @disk_settings.setter
    def disk_settings(self, disk_settings):
        """Sets the disk_settings of this DiskRestoreSettings.

        List of disk settings to restore (used only for disk restore)  # noqa: E501

        :param disk_settings: The disk_settings of this DiskRestoreSettings.  # noqa: E501
        :type: list[DiskSettingsForRestore]
        """
        if disk_settings is None:
            raise ValueError("Invalid value for `disk_settings`, must not be `None`")  # noqa: E501

        self._disk_settings = disk_settings

    @property
    def reason(self):
        """Gets the reason of this DiskRestoreSettings.  # noqa: E501

        Reason for restore.  # noqa: E501

        :return: The reason of this DiskRestoreSettings.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DiskRestoreSettings.

        Reason for restore.  # noqa: E501

        :param reason: The reason of this DiskRestoreSettings.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def power_on_vm_after_restore(self):
        """Gets the power_on_vm_after_restore of this DiskRestoreSettings.  # noqa: E501

        Defines whether the VM will be powered on after restore.  # noqa: E501

        :return: The power_on_vm_after_restore of this DiskRestoreSettings.  # noqa: E501
        :rtype: bool
        """
        return self._power_on_vm_after_restore

    @power_on_vm_after_restore.setter
    def power_on_vm_after_restore(self, power_on_vm_after_restore):
        """Sets the power_on_vm_after_restore of this DiskRestoreSettings.

        Defines whether the VM will be powered on after restore.  # noqa: E501

        :param power_on_vm_after_restore: The power_on_vm_after_restore of this DiskRestoreSettings.  # noqa: E501
        :type: bool
        """

        self._power_on_vm_after_restore = power_on_vm_after_restore

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskRestoreSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskRestoreSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
