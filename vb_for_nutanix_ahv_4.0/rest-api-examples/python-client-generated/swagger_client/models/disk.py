# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Disk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'bus_type': 'AhvBusType',
        'index': 'int',
        'disk_label': 'str',
        'is_cdrom': 'bool',
        'is_volume_group': 'bool',
        'size': 'int',
        'storage_container_id': 'str',
        'storage_container_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'bus_type': 'busType',
        'index': 'index',
        'disk_label': 'diskLabel',
        'is_cdrom': 'isCdrom',
        'is_volume_group': 'isVolumeGroup',
        'size': 'size',
        'storage_container_id': 'storageContainerId',
        'storage_container_name': 'storageContainerName'
    }

    def __init__(self, id=None, bus_type=None, index=None, disk_label=None, is_cdrom=None, is_volume_group=None, size=None, storage_container_id=None, storage_container_name=None):  # noqa: E501
        """Disk - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bus_type = None
        self._index = None
        self._disk_label = None
        self._is_cdrom = None
        self._is_volume_group = None
        self._size = None
        self._storage_container_id = None
        self._storage_container_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if bus_type is not None:
            self.bus_type = bus_type
        if index is not None:
            self.index = index
        if disk_label is not None:
            self.disk_label = disk_label
        if is_cdrom is not None:
            self.is_cdrom = is_cdrom
        if is_volume_group is not None:
            self.is_volume_group = is_volume_group
        if size is not None:
            self.size = size
        if storage_container_id is not None:
            self.storage_container_id = storage_container_id
        if storage_container_name is not None:
            self.storage_container_name = storage_container_name

    @property
    def id(self):
        """Gets the id of this Disk.  # noqa: E501

        ID assigned to the virtual disk in the Nutanix AHV environment.  # noqa: E501

        :return: The id of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Disk.

        ID assigned to the virtual disk in the Nutanix AHV environment.  # noqa: E501

        :param id: The id of this Disk.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def bus_type(self):
        """Gets the bus_type of this Disk.  # noqa: E501


        :return: The bus_type of this Disk.  # noqa: E501
        :rtype: AhvBusType
        """
        return self._bus_type

    @bus_type.setter
    def bus_type(self, bus_type):
        """Sets the bus_type of this Disk.


        :param bus_type: The bus_type of this Disk.  # noqa: E501
        :type: AhvBusType
        """

        self._bus_type = bus_type

    @property
    def index(self):
        """Gets the index of this Disk.  # noqa: E501

        Disk bus address.  # noqa: E501

        :return: The index of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Disk.

        Disk bus address.  # noqa: E501

        :param index: The index of this Disk.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def disk_label(self):
        """Gets the disk_label of this Disk.  # noqa: E501

        Label of the disk.  # noqa: E501

        :return: The disk_label of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._disk_label

    @disk_label.setter
    def disk_label(self, disk_label):
        """Sets the disk_label of this Disk.

        Label of the disk.  # noqa: E501

        :param disk_label: The disk_label of this Disk.  # noqa: E501
        :type: str
        """

        self._disk_label = disk_label

    @property
    def is_cdrom(self):
        """Gets the is_cdrom of this Disk.  # noqa: E501

        Defines whether the disk is a CD-ROM drive.  # noqa: E501

        :return: The is_cdrom of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._is_cdrom

    @is_cdrom.setter
    def is_cdrom(self, is_cdrom):
        """Sets the is_cdrom of this Disk.

        Defines whether the disk is a CD-ROM drive.  # noqa: E501

        :param is_cdrom: The is_cdrom of this Disk.  # noqa: E501
        :type: bool
        """

        self._is_cdrom = is_cdrom

    @property
    def is_volume_group(self):
        """Gets the is_volume_group of this Disk.  # noqa: E501

        Defines whether the object is a volume group.  # noqa: E501

        :return: The is_volume_group of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._is_volume_group

    @is_volume_group.setter
    def is_volume_group(self, is_volume_group):
        """Sets the is_volume_group of this Disk.

        Defines whether the object is a volume group.  # noqa: E501

        :param is_volume_group: The is_volume_group of this Disk.  # noqa: E501
        :type: bool
        """

        self._is_volume_group = is_volume_group

    @property
    def size(self):
        """Gets the size of this Disk.  # noqa: E501

        Size of the disk (in bytes).  # noqa: E501

        :return: The size of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Disk.

        Size of the disk (in bytes).  # noqa: E501

        :param size: The size of this Disk.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def storage_container_id(self):
        """Gets the storage_container_id of this Disk.  # noqa: E501

        ID of the storage container to which the disk is located.  # noqa: E501

        :return: The storage_container_id of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_id

    @storage_container_id.setter
    def storage_container_id(self, storage_container_id):
        """Sets the storage_container_id of this Disk.

        ID of the storage container to which the disk is located.  # noqa: E501

        :param storage_container_id: The storage_container_id of this Disk.  # noqa: E501
        :type: str
        """

        self._storage_container_id = storage_container_id

    @property
    def storage_container_name(self):
        """Gets the storage_container_name of this Disk.  # noqa: E501

        Name of the storage container to which the disk is located.  # noqa: E501

        :return: The storage_container_name of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_name

    @storage_container_name.setter
    def storage_container_name(self, storage_container_name):
        """Sets the storage_container_name of this Disk.

        Name of the storage container to which the disk is located.  # noqa: E501

        :param storage_container_name: The storage_container_name of this Disk.  # noqa: E501
        :type: str
        """

        self._storage_container_name = storage_container_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Disk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
