# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'repositories_count': 'int',
        'state': 'ServerState',
        'version': 'str'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'repositories_count': 'repositoriesCount',
        'state': 'state',
        'version': 'version'
    }

    def __init__(self, address=None, port=None, repositories_count=None, state=None, version=None):  # noqa: E501
        """BackupServer - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._port = None
        self._repositories_count = None
        self._state = None
        self._version = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if repositories_count is not None:
            self.repositories_count = repositories_count
        if state is not None:
            self.state = state
        if version is not None:
            self.version = version

    @property
    def address(self):
        """Gets the address of this BackupServer.  # noqa: E501

        FQDN of the Veeam Backup & Replication server.  # noqa: E501

        :return: The address of this BackupServer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BackupServer.

        FQDN of the Veeam Backup & Replication server.  # noqa: E501

        :param address: The address of this BackupServer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this BackupServer.  # noqa: E501

        Port used to access the server.  # noqa: E501

        :return: The port of this BackupServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this BackupServer.

        Port used to access the server.  # noqa: E501

        :param port: The port of this BackupServer.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def repositories_count(self):
        """Gets the repositories_count of this BackupServer.  # noqa: E501

        Number of configured repositories on the Veeam Backup & Replication server.  # noqa: E501

        :return: The repositories_count of this BackupServer.  # noqa: E501
        :rtype: int
        """
        return self._repositories_count

    @repositories_count.setter
    def repositories_count(self, repositories_count):
        """Sets the repositories_count of this BackupServer.

        Number of configured repositories on the Veeam Backup & Replication server.  # noqa: E501

        :param repositories_count: The repositories_count of this BackupServer.  # noqa: E501
        :type: int
        """

        self._repositories_count = repositories_count

    @property
    def state(self):
        """Gets the state of this BackupServer.  # noqa: E501


        :return: The state of this BackupServer.  # noqa: E501
        :rtype: ServerState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BackupServer.


        :param state: The state of this BackupServer.  # noqa: E501
        :type: ServerState
        """

        self._state = state

    @property
    def version(self):
        """Gets the version of this BackupServer.  # noqa: E501

        Version of the Veeam Backup & Replication server.  # noqa: E501

        :return: The version of this BackupServer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BackupServer.

        Version of the Veeam Backup & Replication server.  # noqa: E501

        :param version: The version of this BackupServer.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
