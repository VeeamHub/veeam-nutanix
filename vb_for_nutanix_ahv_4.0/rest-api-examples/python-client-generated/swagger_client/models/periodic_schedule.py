# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodicSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'int',
        'mode': 'PeriodicMode'
    }

    attribute_map = {
        'interval': 'interval',
        'mode': 'mode'
    }

    def __init__(self, interval=None, mode=None):  # noqa: E501
        """PeriodicSchedule - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._mode = None
        self.discriminator = None
        if interval is not None:
            self.interval = interval
        if mode is not None:
            self.mode = mode

    @property
    def interval(self):
        """Gets the interval of this PeriodicSchedule.  # noqa: E501

        Specified time offset for periodically run  # noqa: E501

        :return: The interval of this PeriodicSchedule.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this PeriodicSchedule.

        Specified time offset for periodically run  # noqa: E501

        :param interval: The interval of this PeriodicSchedule.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def mode(self):
        """Gets the mode of this PeriodicSchedule.  # noqa: E501


        :return: The mode of this PeriodicSchedule.  # noqa: E501
        :rtype: PeriodicMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PeriodicSchedule.


        :param mode: The mode of this PeriodicSchedule.  # noqa: E501
        :type: PeriodicMode
        """

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodicSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodicSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
