# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProgressEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'EventSeverity',
        'start_time_utc': 'datetime',
        'end_time_utc': 'datetime',
        'message': 'str'
    }

    attribute_map = {
        'severity': 'severity',
        'start_time_utc': 'startTimeUtc',
        'end_time_utc': 'endTimeUtc',
        'message': 'message'
    }

    def __init__(self, severity=None, start_time_utc=None, end_time_utc=None, message=None):  # noqa: E501
        """ProgressEvent - a model defined in Swagger"""  # noqa: E501
        self._severity = None
        self._start_time_utc = None
        self._end_time_utc = None
        self._message = None
        self.discriminator = None
        if severity is not None:
            self.severity = severity
        if start_time_utc is not None:
            self.start_time_utc = start_time_utc
        if end_time_utc is not None:
            self.end_time_utc = end_time_utc
        if message is not None:
            self.message = message

    @property
    def severity(self):
        """Gets the severity of this ProgressEvent.  # noqa: E501


        :return: The severity of this ProgressEvent.  # noqa: E501
        :rtype: EventSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ProgressEvent.


        :param severity: The severity of this ProgressEvent.  # noqa: E501
        :type: EventSeverity
        """

        self._severity = severity

    @property
    def start_time_utc(self):
        """Gets the start_time_utc of this ProgressEvent.  # noqa: E501

        Date and time when the task started.  # noqa: E501

        :return: The start_time_utc of this ProgressEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time_utc

    @start_time_utc.setter
    def start_time_utc(self, start_time_utc):
        """Sets the start_time_utc of this ProgressEvent.

        Date and time when the task started.  # noqa: E501

        :param start_time_utc: The start_time_utc of this ProgressEvent.  # noqa: E501
        :type: datetime
        """

        self._start_time_utc = start_time_utc

    @property
    def end_time_utc(self):
        """Gets the end_time_utc of this ProgressEvent.  # noqa: E501

        Date and time when the task finished.  # noqa: E501

        :return: The end_time_utc of this ProgressEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time_utc

    @end_time_utc.setter
    def end_time_utc(self, end_time_utc):
        """Sets the end_time_utc of this ProgressEvent.

        Date and time when the task finished.  # noqa: E501

        :param end_time_utc: The end_time_utc of this ProgressEvent.  # noqa: E501
        :type: datetime
        """

        self._end_time_utc = end_time_utc

    @property
    def message(self):
        """Gets the message of this ProgressEvent.  # noqa: E501

        Task summary.  # noqa: E501

        :return: The message of this ProgressEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProgressEvent.

        Task summary.  # noqa: E501

        :param message: The message of this ProgressEvent.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProgressEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
