# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupRestorePointData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_corrupted': 'bool',
        'backup_type': 'str',
        'backup_snapshot_id': 'str',
        'vm_id': 'str',
        'backup_id': 'str',
        'backup_size_bytes': 'int'
    }

    attribute_map = {
        'is_corrupted': 'isCorrupted',
        'backup_type': 'backupType',
        'backup_snapshot_id': 'backupSnapshotId',
        'vm_id': 'vmId',
        'backup_id': 'backupId',
        'backup_size_bytes': 'backupSizeBytes'
    }

    def __init__(self, is_corrupted=None, backup_type=None, backup_snapshot_id=None, vm_id=None, backup_id=None, backup_size_bytes=None):  # noqa: E501
        """BackupRestorePointData - a model defined in Swagger"""  # noqa: E501
        self._is_corrupted = None
        self._backup_type = None
        self._backup_snapshot_id = None
        self._vm_id = None
        self._backup_id = None
        self._backup_size_bytes = None
        self.discriminator = None
        if is_corrupted is not None:
            self.is_corrupted = is_corrupted
        if backup_type is not None:
            self.backup_type = backup_type
        if backup_snapshot_id is not None:
            self.backup_snapshot_id = backup_snapshot_id
        if vm_id is not None:
            self.vm_id = vm_id
        if backup_id is not None:
            self.backup_id = backup_id
        if backup_size_bytes is not None:
            self.backup_size_bytes = backup_size_bytes

    @property
    def is_corrupted(self):
        """Gets the is_corrupted of this BackupRestorePointData.  # noqa: E501

        Defines whether the backup is corrupted.  # noqa: E501

        :return: The is_corrupted of this BackupRestorePointData.  # noqa: E501
        :rtype: bool
        """
        return self._is_corrupted

    @is_corrupted.setter
    def is_corrupted(self, is_corrupted):
        """Sets the is_corrupted of this BackupRestorePointData.

        Defines whether the backup is corrupted.  # noqa: E501

        :param is_corrupted: The is_corrupted of this BackupRestorePointData.  # noqa: E501
        :type: bool
        """

        self._is_corrupted = is_corrupted

    @property
    def backup_type(self):
        """Gets the backup_type of this BackupRestorePointData.  # noqa: E501

        Type of the backup.  # noqa: E501

        :return: The backup_type of this BackupRestorePointData.  # noqa: E501
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this BackupRestorePointData.

        Type of the backup.  # noqa: E501

        :param backup_type: The backup_type of this BackupRestorePointData.  # noqa: E501
        :type: str
        """

        self._backup_type = backup_type

    @property
    def backup_snapshot_id(self):
        """Gets the backup_snapshot_id of this BackupRestorePointData.  # noqa: E501

        System ID assigned to the backup snapshot in Veeam Backup for Nutanix AHV.  # noqa: E501

        :return: The backup_snapshot_id of this BackupRestorePointData.  # noqa: E501
        :rtype: str
        """
        return self._backup_snapshot_id

    @backup_snapshot_id.setter
    def backup_snapshot_id(self, backup_snapshot_id):
        """Sets the backup_snapshot_id of this BackupRestorePointData.

        System ID assigned to the backup snapshot in Veeam Backup for Nutanix AHV.  # noqa: E501

        :param backup_snapshot_id: The backup_snapshot_id of this BackupRestorePointData.  # noqa: E501
        :type: str
        """

        self._backup_snapshot_id = backup_snapshot_id

    @property
    def vm_id(self):
        """Gets the vm_id of this BackupRestorePointData.  # noqa: E501

        ID of a VM that was backed up.  # noqa: E501

        :return: The vm_id of this BackupRestorePointData.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this BackupRestorePointData.

        ID of a VM that was backed up.  # noqa: E501

        :param vm_id: The vm_id of this BackupRestorePointData.  # noqa: E501
        :type: str
        """

        self._vm_id = vm_id

    @property
    def backup_id(self):
        """Gets the backup_id of this BackupRestorePointData.  # noqa: E501

        System ID assigned to the backup in Veeam Backup for Nutanix AHV.  # noqa: E501

        :return: The backup_id of this BackupRestorePointData.  # noqa: E501
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this BackupRestorePointData.

        System ID assigned to the backup in Veeam Backup for Nutanix AHV.  # noqa: E501

        :param backup_id: The backup_id of this BackupRestorePointData.  # noqa: E501
        :type: str
        """

        self._backup_id = backup_id

    @property
    def backup_size_bytes(self):
        """Gets the backup_size_bytes of this BackupRestorePointData.  # noqa: E501

        Size of the backup (in bytes).  # noqa: E501

        :return: The backup_size_bytes of this BackupRestorePointData.  # noqa: E501
        :rtype: int
        """
        return self._backup_size_bytes

    @backup_size_bytes.setter
    def backup_size_bytes(self, backup_size_bytes):
        """Sets the backup_size_bytes of this BackupRestorePointData.

        Size of the backup (in bytes).  # noqa: E501

        :param backup_size_bytes: The backup_size_bytes of this BackupRestorePointData.  # noqa: E501
        :type: int
        """

        self._backup_size_bytes = backup_size_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupRestorePointData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupRestorePointData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
