# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'mode': 'JobMode',
        'cluster_id': 'str',
        'repository_id': 'str',
        'vm_ids': 'list[str]',
        'protection_domains': 'list[str]',
        'schedule_settings': 'ScheduleSettings',
        'active_full_settings': 'ActiveFullSettings',
        'deleted_vm_retention': 'DeletedVmRetentionSettings',
        'gfs_settings': 'GfsSettings',
        'health_check_settings': 'HealthCheckSettings',
        'synthetic_full_settings': 'SyntheticFullSettings',
        'retention_settings': 'RetentionSettings'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'mode': 'mode',
        'cluster_id': 'clusterId',
        'repository_id': 'repositoryId',
        'vm_ids': 'vmIds',
        'protection_domains': 'protectionDomains',
        'schedule_settings': 'scheduleSettings',
        'active_full_settings': 'activeFullSettings',
        'deleted_vm_retention': 'deletedVmRetention',
        'gfs_settings': 'gfsSettings',
        'health_check_settings': 'healthCheckSettings',
        'synthetic_full_settings': 'syntheticFullSettings',
        'retention_settings': 'retentionSettings'
    }

    def __init__(self, id=None, name=None, description=None, mode=None, cluster_id=None, repository_id=None, vm_ids=None, protection_domains=None, schedule_settings=None, active_full_settings=None, deleted_vm_retention=None, gfs_settings=None, health_check_settings=None, synthetic_full_settings=None, retention_settings=None):  # noqa: E501
        """JobSettings - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._mode = None
        self._cluster_id = None
        self._repository_id = None
        self._vm_ids = None
        self._protection_domains = None
        self._schedule_settings = None
        self._active_full_settings = None
        self._deleted_vm_retention = None
        self._gfs_settings = None
        self._health_check_settings = None
        self._synthetic_full_settings = None
        self._retention_settings = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.mode = mode
        self.cluster_id = cluster_id
        if repository_id is not None:
            self.repository_id = repository_id
        if vm_ids is not None:
            self.vm_ids = vm_ids
        if protection_domains is not None:
            self.protection_domains = protection_domains
        self.schedule_settings = schedule_settings
        if active_full_settings is not None:
            self.active_full_settings = active_full_settings
        if deleted_vm_retention is not None:
            self.deleted_vm_retention = deleted_vm_retention
        if gfs_settings is not None:
            self.gfs_settings = gfs_settings
        if health_check_settings is not None:
            self.health_check_settings = health_check_settings
        if synthetic_full_settings is not None:
            self.synthetic_full_settings = synthetic_full_settings
        self.retention_settings = retention_settings

    @property
    def id(self):
        """Gets the id of this JobSettings.  # noqa: E501

        System ID assigned to a job in the Veeam Backup for Nutanix AHV.  # noqa: E501

        :return: The id of this JobSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobSettings.

        System ID assigned to a job in the Veeam Backup for Nutanix AHV.  # noqa: E501

        :param id: The id of this JobSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobSettings.  # noqa: E501

        Name of the job.  # noqa: E501

        :return: The name of this JobSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobSettings.

        Name of the job.  # noqa: E501

        :param name: The name of this JobSettings.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this JobSettings.  # noqa: E501

        Description opf the job.  # noqa: E501

        :return: The description of this JobSettings.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobSettings.

        Description opf the job.  # noqa: E501

        :param description: The description of this JobSettings.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this JobSettings.  # noqa: E501


        :return: The mode of this JobSettings.  # noqa: E501
        :rtype: JobMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this JobSettings.


        :param mode: The mode of this JobSettings.  # noqa: E501
        :type: JobMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def cluster_id(self):
        """Gets the cluster_id of this JobSettings.  # noqa: E501

        ID of a cluster whose resources the job protects.  # noqa: E501

        :return: The cluster_id of this JobSettings.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this JobSettings.

        ID of a cluster whose resources the job protects.  # noqa: E501

        :param cluster_id: The cluster_id of this JobSettings.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def repository_id(self):
        """Gets the repository_id of this JobSettings.  # noqa: E501

        ID of a repository where backups created by the job are stored.  # noqa: E501

        :return: The repository_id of this JobSettings.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this JobSettings.

        ID of a repository where backups created by the job are stored.  # noqa: E501

        :param repository_id: The repository_id of this JobSettings.  # noqa: E501
        :type: str
        """

        self._repository_id = repository_id

    @property
    def vm_ids(self):
        """Gets the vm_ids of this JobSettings.  # noqa: E501

        IDs of virtual machines processed by the job.  # noqa: E501

        :return: The vm_ids of this JobSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._vm_ids

    @vm_ids.setter
    def vm_ids(self, vm_ids):
        """Sets the vm_ids of this JobSettings.

        IDs of virtual machines processed by the job.  # noqa: E501

        :param vm_ids: The vm_ids of this JobSettings.  # noqa: E501
        :type: list[str]
        """

        self._vm_ids = vm_ids

    @property
    def protection_domains(self):
        """Gets the protection_domains of this JobSettings.  # noqa: E501

        Names of protection domains processed by the job.  # noqa: E501

        :return: The protection_domains of this JobSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._protection_domains

    @protection_domains.setter
    def protection_domains(self, protection_domains):
        """Sets the protection_domains of this JobSettings.

        Names of protection domains processed by the job.  # noqa: E501

        :param protection_domains: The protection_domains of this JobSettings.  # noqa: E501
        :type: list[str]
        """

        self._protection_domains = protection_domains

    @property
    def schedule_settings(self):
        """Gets the schedule_settings of this JobSettings.  # noqa: E501


        :return: The schedule_settings of this JobSettings.  # noqa: E501
        :rtype: ScheduleSettings
        """
        return self._schedule_settings

    @schedule_settings.setter
    def schedule_settings(self, schedule_settings):
        """Sets the schedule_settings of this JobSettings.


        :param schedule_settings: The schedule_settings of this JobSettings.  # noqa: E501
        :type: ScheduleSettings
        """
        if schedule_settings is None:
            raise ValueError("Invalid value for `schedule_settings`, must not be `None`")  # noqa: E501

        self._schedule_settings = schedule_settings

    @property
    def active_full_settings(self):
        """Gets the active_full_settings of this JobSettings.  # noqa: E501


        :return: The active_full_settings of this JobSettings.  # noqa: E501
        :rtype: ActiveFullSettings
        """
        return self._active_full_settings

    @active_full_settings.setter
    def active_full_settings(self, active_full_settings):
        """Sets the active_full_settings of this JobSettings.


        :param active_full_settings: The active_full_settings of this JobSettings.  # noqa: E501
        :type: ActiveFullSettings
        """

        self._active_full_settings = active_full_settings

    @property
    def deleted_vm_retention(self):
        """Gets the deleted_vm_retention of this JobSettings.  # noqa: E501


        :return: The deleted_vm_retention of this JobSettings.  # noqa: E501
        :rtype: DeletedVmRetentionSettings
        """
        return self._deleted_vm_retention

    @deleted_vm_retention.setter
    def deleted_vm_retention(self, deleted_vm_retention):
        """Sets the deleted_vm_retention of this JobSettings.


        :param deleted_vm_retention: The deleted_vm_retention of this JobSettings.  # noqa: E501
        :type: DeletedVmRetentionSettings
        """

        self._deleted_vm_retention = deleted_vm_retention

    @property
    def gfs_settings(self):
        """Gets the gfs_settings of this JobSettings.  # noqa: E501


        :return: The gfs_settings of this JobSettings.  # noqa: E501
        :rtype: GfsSettings
        """
        return self._gfs_settings

    @gfs_settings.setter
    def gfs_settings(self, gfs_settings):
        """Sets the gfs_settings of this JobSettings.


        :param gfs_settings: The gfs_settings of this JobSettings.  # noqa: E501
        :type: GfsSettings
        """

        self._gfs_settings = gfs_settings

    @property
    def health_check_settings(self):
        """Gets the health_check_settings of this JobSettings.  # noqa: E501


        :return: The health_check_settings of this JobSettings.  # noqa: E501
        :rtype: HealthCheckSettings
        """
        return self._health_check_settings

    @health_check_settings.setter
    def health_check_settings(self, health_check_settings):
        """Sets the health_check_settings of this JobSettings.


        :param health_check_settings: The health_check_settings of this JobSettings.  # noqa: E501
        :type: HealthCheckSettings
        """

        self._health_check_settings = health_check_settings

    @property
    def synthetic_full_settings(self):
        """Gets the synthetic_full_settings of this JobSettings.  # noqa: E501


        :return: The synthetic_full_settings of this JobSettings.  # noqa: E501
        :rtype: SyntheticFullSettings
        """
        return self._synthetic_full_settings

    @synthetic_full_settings.setter
    def synthetic_full_settings(self, synthetic_full_settings):
        """Sets the synthetic_full_settings of this JobSettings.


        :param synthetic_full_settings: The synthetic_full_settings of this JobSettings.  # noqa: E501
        :type: SyntheticFullSettings
        """

        self._synthetic_full_settings = synthetic_full_settings

    @property
    def retention_settings(self):
        """Gets the retention_settings of this JobSettings.  # noqa: E501


        :return: The retention_settings of this JobSettings.  # noqa: E501
        :rtype: RetentionSettings
        """
        return self._retention_settings

    @retention_settings.setter
    def retention_settings(self, retention_settings):
        """Sets the retention_settings of this JobSettings.


        :param retention_settings: The retention_settings of this JobSettings.  # noqa: E501
        :type: RetentionSettings
        """
        if retention_settings is None:
            raise ValueError("Invalid value for `retention_settings`, must not be `None`")  # noqa: E501

        self._retention_settings = retention_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
