# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'job_name': 'str',
        'backup_mode': 'BackupMode',
        'object_name': 'str',
        'object_id': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'job_name': 'jobName',
        'backup_mode': 'backupMode',
        'object_name': 'objectName',
        'object_id': 'objectId',
        'reason': 'reason'
    }

    def __init__(self, job_id=None, job_name=None, backup_mode=None, object_name=None, object_id=None, reason=None):  # noqa: E501
        """SessionContext - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._job_name = None
        self._backup_mode = None
        self._object_name = None
        self._object_id = None
        self._reason = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if job_name is not None:
            self.job_name = job_name
        if backup_mode is not None:
            self.backup_mode = backup_mode
        if object_name is not None:
            self.object_name = object_name
        if object_id is not None:
            self.object_id = object_id
        if reason is not None:
            self.reason = reason

    @property
    def job_id(self):
        """Gets the job_id of this SessionContext.  # noqa: E501

        System ID of a job that initiated the session.  # noqa: E501

        :return: The job_id of this SessionContext.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this SessionContext.

        System ID of a job that initiated the session.  # noqa: E501

        :param job_id: The job_id of this SessionContext.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this SessionContext.  # noqa: E501

        Name of a job that initiated the session.  # noqa: E501

        :return: The job_name of this SessionContext.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this SessionContext.

        Name of a job that initiated the session.  # noqa: E501

        :param job_name: The job_name of this SessionContext.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def backup_mode(self):
        """Gets the backup_mode of this SessionContext.  # noqa: E501


        :return: The backup_mode of this SessionContext.  # noqa: E501
        :rtype: BackupMode
        """
        return self._backup_mode

    @backup_mode.setter
    def backup_mode(self, backup_mode):
        """Sets the backup_mode of this SessionContext.


        :param backup_mode: The backup_mode of this SessionContext.  # noqa: E501
        :type: BackupMode
        """

        self._backup_mode = backup_mode

    @property
    def object_name(self):
        """Gets the object_name of this SessionContext.  # noqa: E501

        Name of an object processed in the session.  # noqa: E501

        :return: The object_name of this SessionContext.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this SessionContext.

        Name of an object processed in the session.  # noqa: E501

        :param object_name: The object_name of this SessionContext.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def object_id(self):
        """Gets the object_id of this SessionContext.  # noqa: E501

        System ID of an object processed in the session.  # noqa: E501

        :return: The object_id of this SessionContext.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this SessionContext.

        System ID of an object processed in the session.  # noqa: E501

        :param object_id: The object_id of this SessionContext.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def reason(self):
        """Gets the reason of this SessionContext.  # noqa: E501

        Specifies a reason for the restore operation.  # noqa: E501

        :return: The reason of this SessionContext.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SessionContext.

        Specifies a reason for the restore operation.  # noqa: E501

        :param reason: The reason of this SessionContext.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
