# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProtectedVmsReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_vms': 'int',
        'protected_vms': 'int',
        'protected_vms_with_snapshots': 'int',
        'unprotected_vms': 'int'
    }

    attribute_map = {
        'total_vms': 'totalVms',
        'protected_vms': 'protectedVms',
        'protected_vms_with_snapshots': 'protectedVmsWithSnapshots',
        'unprotected_vms': 'unprotectedVms'
    }

    def __init__(self, total_vms=None, protected_vms=None, protected_vms_with_snapshots=None, unprotected_vms=None):  # noqa: E501
        """ProtectedVmsReport - a model defined in Swagger"""  # noqa: E501
        self._total_vms = None
        self._protected_vms = None
        self._protected_vms_with_snapshots = None
        self._unprotected_vms = None
        self.discriminator = None
        self.total_vms = total_vms
        self.protected_vms = protected_vms
        self.protected_vms_with_snapshots = protected_vms_with_snapshots
        self.unprotected_vms = unprotected_vms

    @property
    def total_vms(self):
        """Gets the total_vms of this ProtectedVmsReport.  # noqa: E501

        Total number of VMs in the cluster.  # noqa: E501

        :return: The total_vms of this ProtectedVmsReport.  # noqa: E501
        :rtype: int
        """
        return self._total_vms

    @total_vms.setter
    def total_vms(self, total_vms):
        """Sets the total_vms of this ProtectedVmsReport.

        Total number of VMs in the cluster.  # noqa: E501

        :param total_vms: The total_vms of this ProtectedVmsReport.  # noqa: E501
        :type: int
        """
        if total_vms is None:
            raise ValueError("Invalid value for `total_vms`, must not be `None`")  # noqa: E501

        self._total_vms = total_vms

    @property
    def protected_vms(self):
        """Gets the protected_vms of this ProtectedVmsReport.  # noqa: E501

        Number of VMs that have backups.  # noqa: E501

        :return: The protected_vms of this ProtectedVmsReport.  # noqa: E501
        :rtype: int
        """
        return self._protected_vms

    @protected_vms.setter
    def protected_vms(self, protected_vms):
        """Sets the protected_vms of this ProtectedVmsReport.

        Number of VMs that have backups.  # noqa: E501

        :param protected_vms: The protected_vms of this ProtectedVmsReport.  # noqa: E501
        :type: int
        """
        if protected_vms is None:
            raise ValueError("Invalid value for `protected_vms`, must not be `None`")  # noqa: E501

        self._protected_vms = protected_vms

    @property
    def protected_vms_with_snapshots(self):
        """Gets the protected_vms_with_snapshots of this ProtectedVmsReport.  # noqa: E501

        Number of VMs that have snapshots of any type.  # noqa: E501

        :return: The protected_vms_with_snapshots of this ProtectedVmsReport.  # noqa: E501
        :rtype: int
        """
        return self._protected_vms_with_snapshots

    @protected_vms_with_snapshots.setter
    def protected_vms_with_snapshots(self, protected_vms_with_snapshots):
        """Sets the protected_vms_with_snapshots of this ProtectedVmsReport.

        Number of VMs that have snapshots of any type.  # noqa: E501

        :param protected_vms_with_snapshots: The protected_vms_with_snapshots of this ProtectedVmsReport.  # noqa: E501
        :type: int
        """
        if protected_vms_with_snapshots is None:
            raise ValueError("Invalid value for `protected_vms_with_snapshots`, must not be `None`")  # noqa: E501

        self._protected_vms_with_snapshots = protected_vms_with_snapshots

    @property
    def unprotected_vms(self):
        """Gets the unprotected_vms of this ProtectedVmsReport.  # noqa: E501

        Number of unprotected VMs.  # noqa: E501

        :return: The unprotected_vms of this ProtectedVmsReport.  # noqa: E501
        :rtype: int
        """
        return self._unprotected_vms

    @unprotected_vms.setter
    def unprotected_vms(self, unprotected_vms):
        """Sets the unprotected_vms of this ProtectedVmsReport.

        Number of unprotected VMs.  # noqa: E501

        :param unprotected_vms: The unprotected_vms of this ProtectedVmsReport.  # noqa: E501
        :type: int
        """
        if unprotected_vms is None:
            raise ValueError("Invalid value for `unprotected_vms`, must not be `None`")  # noqa: E501

        self._unprotected_vms = unprotected_vms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectedVmsReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectedVmsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
