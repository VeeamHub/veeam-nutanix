# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SortExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_property': 'str',
        'direction': 'str',
        'collation': 'Collation'
    }

    attribute_map = {
        '_property': 'property',
        'direction': 'direction',
        'collation': 'collation'
    }

    def __init__(self, _property=None, direction='Ascending', collation=None):  # noqa: E501
        """SortExpression - a model defined in Swagger"""  # noqa: E501
        self.__property = None
        self._direction = None
        self._collation = None
        self.discriminator = None
        self._property = _property
        if direction is not None:
            self.direction = direction
        if collation is not None:
            self.collation = collation

    @property
    def _property(self):
        """Gets the _property of this SortExpression.  # noqa: E501

        Path to the required resource property.  # noqa: E501

        :return: The _property of this SortExpression.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this SortExpression.

        Path to the required resource property.  # noqa: E501

        :param _property: The _property of this SortExpression.  # noqa: E501
        :type: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def direction(self):
        """Gets the direction of this SortExpression.  # noqa: E501

        Direction specifier.  # noqa: E501

        :return: The direction of this SortExpression.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SortExpression.

        Direction specifier.  # noqa: E501

        :param direction: The direction of this SortExpression.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def collation(self):
        """Gets the collation of this SortExpression.  # noqa: E501


        :return: The collation of this SortExpression.  # noqa: E501
        :rtype: Collation
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this SortExpression.


        :param collation: The collation of this SortExpression.  # noqa: E501
        :type: Collation
        """

        self._collation = collation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SortExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortExpression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
