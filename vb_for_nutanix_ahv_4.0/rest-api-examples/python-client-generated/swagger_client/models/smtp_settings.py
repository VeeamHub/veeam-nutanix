# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmtpSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'port': 'int',
        'use_ssl': 'bool',
        'certificate_thumbprint': 'str',
        'authentication_required': 'bool',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'host': 'host',
        'port': 'port',
        'use_ssl': 'useSsl',
        'certificate_thumbprint': 'certificateThumbprint',
        'authentication_required': 'authenticationRequired',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, host=None, port=25, use_ssl=None, certificate_thumbprint=None, authentication_required=None, username=None, password=None):  # noqa: E501
        """SmtpSettings - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._port = None
        self._use_ssl = None
        self._certificate_thumbprint = None
        self._authentication_required = None
        self._username = None
        self._password = None
        self.discriminator = None
        self.host = host
        if port is not None:
            self.port = port
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if certificate_thumbprint is not None:
            self.certificate_thumbprint = certificate_thumbprint
        if authentication_required is not None:
            self.authentication_required = authentication_required
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def host(self):
        """Gets the host of this SmtpSettings.  # noqa: E501

        DNS name or an IP address of an SMTP server.  # noqa: E501

        :return: The host of this SmtpSettings.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SmtpSettings.

        DNS name or an IP address of an SMTP server.  # noqa: E501

        :param host: The host of this SmtpSettings.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this SmtpSettings.  # noqa: E501

        Port number used by the SMTP server. Default value is *25*.  # noqa: E501

        :return: The port of this SmtpSettings.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SmtpSettings.

        Port number used by the SMTP server. Default value is *25*.  # noqa: E501

        :param port: The port of this SmtpSettings.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def use_ssl(self):
        """Gets the use_ssl of this SmtpSettings.  # noqa: E501

        Defines whether to use the secure connection for email operations. Default value is *false*.  # noqa: E501

        :return: The use_ssl of this SmtpSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this SmtpSettings.

        Defines whether to use the secure connection for email operations. Default value is *false*.  # noqa: E501

        :param use_ssl: The use_ssl of this SmtpSettings.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def certificate_thumbprint(self):
        """Gets the certificate_thumbprint of this SmtpSettings.  # noqa: E501

        Hexadecimal string that uniquely identifies a certificate used on the SMTP server.  # noqa: E501

        :return: The certificate_thumbprint of this SmtpSettings.  # noqa: E501
        :rtype: str
        """
        return self._certificate_thumbprint

    @certificate_thumbprint.setter
    def certificate_thumbprint(self, certificate_thumbprint):
        """Sets the certificate_thumbprint of this SmtpSettings.

        Hexadecimal string that uniquely identifies a certificate used on the SMTP server.  # noqa: E501

        :param certificate_thumbprint: The certificate_thumbprint of this SmtpSettings.  # noqa: E501
        :type: str
        """

        self._certificate_thumbprint = certificate_thumbprint

    @property
    def authentication_required(self):
        """Gets the authentication_required of this SmtpSettings.  # noqa: E501

        Defines whether to use a specific account to connect to the SMTP server. Default value is *false*.  # noqa: E501

        :return: The authentication_required of this SmtpSettings.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this SmtpSettings.

        Defines whether to use a specific account to connect to the SMTP server. Default value is *false*.  # noqa: E501

        :param authentication_required: The authentication_required of this SmtpSettings.  # noqa: E501
        :type: bool
        """

        self._authentication_required = authentication_required

    @property
    def username(self):
        """Gets the username of this SmtpSettings.  # noqa: E501

        Specifies user name used to access the account on the SMTP server.  # noqa: E501

        :return: The username of this SmtpSettings.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SmtpSettings.

        Specifies user name used to access the account on the SMTP server.  # noqa: E501

        :param username: The username of this SmtpSettings.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this SmtpSettings.  # noqa: E501

        Password used to access the account on the SMTP server.  # noqa: E501

        :return: The password of this SmtpSettings.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SmtpSettings.

        Password used to access the account on the SMTP server.  # noqa: E501

        :param password: The password of this SmtpSettings.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmtpSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmtpSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
