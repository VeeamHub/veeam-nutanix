# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'refresh_token': 'str',
        'access_token_expires_at': 'datetime',
        'refresh_token_expires_at': 'datetime'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'refresh_token': 'refreshToken',
        'access_token_expires_at': 'accessTokenExpiresAt',
        'refresh_token_expires_at': 'refreshTokenExpiresAt'
    }

    def __init__(self, access_token=None, refresh_token=None, access_token_expires_at=None, refresh_token_expires_at=None):  # noqa: E501
        """TokenModel - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._refresh_token = None
        self._access_token_expires_at = None
        self._refresh_token_expires_at = None
        self.discriminator = None
        self.access_token = access_token
        self.refresh_token = refresh_token
        if access_token_expires_at is not None:
            self.access_token_expires_at = access_token_expires_at
        if refresh_token_expires_at is not None:
            self.refresh_token_expires_at = refresh_token_expires_at

    @property
    def access_token(self):
        """Gets the access_token of this TokenModel.  # noqa: E501

        String that represents authorization issued to the user and that must be used in all requests during the current logon session.  # noqa: E501

        :return: The access_token of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this TokenModel.

        String that represents authorization issued to the user and that must be used in all requests during the current logon session.  # noqa: E501

        :param access_token: The access_token of this TokenModel.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this TokenModel.  # noqa: E501

        String that represents authorization granted to the user and that can be used to obtain a new access token if the current access token expires or becomes lost.  # noqa: E501

        :return: The refresh_token of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this TokenModel.

        String that represents authorization granted to the user and that can be used to obtain a new access token if the current access token expires or becomes lost.  # noqa: E501

        :param refresh_token: The refresh_token of this TokenModel.  # noqa: E501
        :type: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def access_token_expires_at(self):
        """Gets the access_token_expires_at of this TokenModel.  # noqa: E501

        Date and time when the access token expires.  # noqa: E501

        :return: The access_token_expires_at of this TokenModel.  # noqa: E501
        :rtype: datetime
        """
        return self._access_token_expires_at

    @access_token_expires_at.setter
    def access_token_expires_at(self, access_token_expires_at):
        """Sets the access_token_expires_at of this TokenModel.

        Date and time when the access token expires.  # noqa: E501

        :param access_token_expires_at: The access_token_expires_at of this TokenModel.  # noqa: E501
        :type: datetime
        """

        self._access_token_expires_at = access_token_expires_at

    @property
    def refresh_token_expires_at(self):
        """Gets the refresh_token_expires_at of this TokenModel.  # noqa: E501

        Date and time when the refresh token expires.  # noqa: E501

        :return: The refresh_token_expires_at of this TokenModel.  # noqa: E501
        :rtype: datetime
        """
        return self._refresh_token_expires_at

    @refresh_token_expires_at.setter
    def refresh_token_expires_at(self, refresh_token_expires_at):
        """Sets the refresh_token_expires_at of this TokenModel.

        Date and time when the refresh token expires.  # noqa: E501

        :param refresh_token_expires_at: The refresh_token_expires_at of this TokenModel.  # noqa: E501
        :type: datetime
        """

        self._refresh_token_expires_at = refresh_token_expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
