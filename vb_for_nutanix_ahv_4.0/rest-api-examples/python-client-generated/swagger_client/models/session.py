# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'session_type': 'SessionType',
        'parent_session_id': 'str',
        'state': 'SessionState',
        'result': 'SessionResult',
        'start_time_utc': 'datetime',
        'finish_time_utc': 'datetime',
        'duration': 'str',
        'context': 'SessionContext',
        'progress_state': 'SessionProgressState'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'session_type': 'sessionType',
        'parent_session_id': 'parentSessionId',
        'state': 'state',
        'result': 'result',
        'start_time_utc': 'startTimeUtc',
        'finish_time_utc': 'finishTimeUtc',
        'duration': 'duration',
        'context': 'context',
        'progress_state': 'progressState'
    }

    def __init__(self, id=None, name=None, session_type=None, parent_session_id=None, state=None, result=None, start_time_utc=None, finish_time_utc=None, duration=None, context=None, progress_state=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._session_type = None
        self._parent_session_id = None
        self._state = None
        self._result = None
        self._start_time_utc = None
        self._finish_time_utc = None
        self._duration = None
        self._context = None
        self._progress_state = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if session_type is not None:
            self.session_type = session_type
        if parent_session_id is not None:
            self.parent_session_id = parent_session_id
        if state is not None:
            self.state = state
        if result is not None:
            self.result = result
        if start_time_utc is not None:
            self.start_time_utc = start_time_utc
        if finish_time_utc is not None:
            self.finish_time_utc = finish_time_utc
        if duration is not None:
            self.duration = duration
        if context is not None:
            self.context = context
        if progress_state is not None:
            self.progress_state = progress_state

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501

        System ID assigned to a session in the Veeam Backup for Nutanix AHV.  # noqa: E501

        :return: The id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.

        System ID assigned to a session in the Veeam Backup for Nutanix AHV.  # noqa: E501

        :param id: The id of this Session.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Session.  # noqa: E501

        Name of the session.  # noqa: E501

        :return: The name of this Session.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Session.

        Name of the session.  # noqa: E501

        :param name: The name of this Session.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def session_type(self):
        """Gets the session_type of this Session.  # noqa: E501


        :return: The session_type of this Session.  # noqa: E501
        :rtype: SessionType
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """Sets the session_type of this Session.


        :param session_type: The session_type of this Session.  # noqa: E501
        :type: SessionType
        """

        self._session_type = session_type

    @property
    def parent_session_id(self):
        """Gets the parent_session_id of this Session.  # noqa: E501

        System ID of a session that initiated the current session.  # noqa: E501

        :return: The parent_session_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._parent_session_id

    @parent_session_id.setter
    def parent_session_id(self, parent_session_id):
        """Sets the parent_session_id of this Session.

        System ID of a session that initiated the current session.  # noqa: E501

        :param parent_session_id: The parent_session_id of this Session.  # noqa: E501
        :type: str
        """

        self._parent_session_id = parent_session_id

    @property
    def state(self):
        """Gets the state of this Session.  # noqa: E501


        :return: The state of this Session.  # noqa: E501
        :rtype: SessionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Session.


        :param state: The state of this Session.  # noqa: E501
        :type: SessionState
        """

        self._state = state

    @property
    def result(self):
        """Gets the result of this Session.  # noqa: E501


        :return: The result of this Session.  # noqa: E501
        :rtype: SessionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Session.


        :param result: The result of this Session.  # noqa: E501
        :type: SessionResult
        """

        self._result = result

    @property
    def start_time_utc(self):
        """Gets the start_time_utc of this Session.  # noqa: E501

        Date and time when the session started.  # noqa: E501

        :return: The start_time_utc of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time_utc

    @start_time_utc.setter
    def start_time_utc(self, start_time_utc):
        """Sets the start_time_utc of this Session.

        Date and time when the session started.  # noqa: E501

        :param start_time_utc: The start_time_utc of this Session.  # noqa: E501
        :type: datetime
        """

        self._start_time_utc = start_time_utc

    @property
    def finish_time_utc(self):
        """Gets the finish_time_utc of this Session.  # noqa: E501

        Date and time when the session finished or stopped.  # noqa: E501

        :return: The finish_time_utc of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_time_utc

    @finish_time_utc.setter
    def finish_time_utc(self, finish_time_utc):
        """Sets the finish_time_utc of this Session.

        Date and time when the session finished or stopped.  # noqa: E501

        :param finish_time_utc: The finish_time_utc of this Session.  # noqa: E501
        :type: datetime
        """

        self._finish_time_utc = finish_time_utc

    @property
    def duration(self):
        """Gets the duration of this Session.  # noqa: E501

        Time taken to complete the latest job session (in ms).  # noqa: E501

        :return: The duration of this Session.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Session.

        Time taken to complete the latest job session (in ms).  # noqa: E501

        :param duration: The duration of this Session.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def context(self):
        """Gets the context of this Session.  # noqa: E501


        :return: The context of this Session.  # noqa: E501
        :rtype: SessionContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Session.


        :param context: The context of this Session.  # noqa: E501
        :type: SessionContext
        """

        self._context = context

    @property
    def progress_state(self):
        """Gets the progress_state of this Session.  # noqa: E501


        :return: The progress_state of this Session.  # noqa: E501
        :rtype: SessionProgressState
        """
        return self._progress_state

    @progress_state.setter
    def progress_state(self, progress_state):
        """Sets the progress_state of this Session.


        :param progress_state: The progress_state of this Session.  # noqa: E501
        :type: SessionProgressState
        """

        self._progress_state = progress_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
