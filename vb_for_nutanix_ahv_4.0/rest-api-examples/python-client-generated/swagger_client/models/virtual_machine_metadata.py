# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VirtualMachineMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'protection_domain': 'str',
        'consistency_group': 'str',
        'cluster_id': 'str',
        'cluster_name': 'str',
        'size': 'int',
        'disks': 'list[Disk]',
        'network_adapters': 'list[NetworkAdapter]',
        'networks': 'list[NutanixNetwork]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protection_domain': 'protectionDomain',
        'consistency_group': 'consistencyGroup',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'size': 'size',
        'disks': 'disks',
        'network_adapters': 'networkAdapters',
        'networks': 'networks'
    }

    def __init__(self, id=None, name=None, protection_domain=None, consistency_group=None, cluster_id=None, cluster_name=None, size=None, disks=None, network_adapters=None, networks=None):  # noqa: E501
        """VirtualMachineMetadata - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._protection_domain = None
        self._consistency_group = None
        self._cluster_id = None
        self._cluster_name = None
        self._size = None
        self._disks = None
        self._network_adapters = None
        self._networks = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if protection_domain is not None:
            self.protection_domain = protection_domain
        if consistency_group is not None:
            self.consistency_group = consistency_group
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if size is not None:
            self.size = size
        if disks is not None:
            self.disks = disks
        if network_adapters is not None:
            self.network_adapters = network_adapters
        if networks is not None:
            self.networks = networks

    @property
    def id(self):
        """Gets the id of this VirtualMachineMetadata.  # noqa: E501

        ID assigned to a virtual machine in the Nutanix AHV environment.  # noqa: E501

        :return: The id of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineMetadata.

        ID assigned to a virtual machine in the Nutanix AHV environment.  # noqa: E501

        :param id: The id of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualMachineMetadata.  # noqa: E501

        Name of the virtual machine.  # noqa: E501

        :return: The name of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineMetadata.

        Name of the virtual machine.  # noqa: E501

        :param name: The name of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protection_domain(self):
        """Gets the protection_domain of this VirtualMachineMetadata.  # noqa: E501

        Name of the protection domain that contains the virtual machine.  # noqa: E501

        :return: The protection_domain of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._protection_domain

    @protection_domain.setter
    def protection_domain(self, protection_domain):
        """Sets the protection_domain of this VirtualMachineMetadata.

        Name of the protection domain that contains the virtual machine.  # noqa: E501

        :param protection_domain: The protection_domain of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._protection_domain = protection_domain

    @property
    def consistency_group(self):
        """Gets the consistency_group of this VirtualMachineMetadata.  # noqa: E501

        Name of the consistency group that contains the virtual machine.  # noqa: E501

        :return: The consistency_group of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this VirtualMachineMetadata.

        Name of the consistency group that contains the virtual machine.  # noqa: E501

        :param consistency_group: The consistency_group of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._consistency_group = consistency_group

    @property
    def cluster_id(self):
        """Gets the cluster_id of this VirtualMachineMetadata.  # noqa: E501

        ID assigned to a cluster the virtual machine belongs to.  # noqa: E501

        :return: The cluster_id of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this VirtualMachineMetadata.

        ID assigned to a cluster the virtual machine belongs to.  # noqa: E501

        :param cluster_id: The cluster_id of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this VirtualMachineMetadata.  # noqa: E501

        Name of a cluster the virtual machine belongs to.  # noqa: E501

        :return: The cluster_name of this VirtualMachineMetadata.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this VirtualMachineMetadata.

        Name of a cluster the virtual machine belongs to.  # noqa: E501

        :param cluster_name: The cluster_name of this VirtualMachineMetadata.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def size(self):
        """Gets the size of this VirtualMachineMetadata.  # noqa: E501

        Size of all disk attached to the virtual machine (in bytes).  # noqa: E501

        :return: The size of this VirtualMachineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VirtualMachineMetadata.

        Size of all disk attached to the virtual machine (in bytes).  # noqa: E501

        :param size: The size of this VirtualMachineMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def disks(self):
        """Gets the disks of this VirtualMachineMetadata.  # noqa: E501

        List of disks attached to the virtual machine.  # noqa: E501

        :return: The disks of this VirtualMachineMetadata.  # noqa: E501
        :rtype: list[Disk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VirtualMachineMetadata.

        List of disks attached to the virtual machine.  # noqa: E501

        :param disks: The disks of this VirtualMachineMetadata.  # noqa: E501
        :type: list[Disk]
        """

        self._disks = disks

    @property
    def network_adapters(self):
        """Gets the network_adapters of this VirtualMachineMetadata.  # noqa: E501

        List of network adapters configured on the virtual machine.  # noqa: E501

        :return: The network_adapters of this VirtualMachineMetadata.  # noqa: E501
        :rtype: list[NetworkAdapter]
        """
        return self._network_adapters

    @network_adapters.setter
    def network_adapters(self, network_adapters):
        """Sets the network_adapters of this VirtualMachineMetadata.

        List of network adapters configured on the virtual machine.  # noqa: E501

        :param network_adapters: The network_adapters of this VirtualMachineMetadata.  # noqa: E501
        :type: list[NetworkAdapter]
        """

        self._network_adapters = network_adapters

    @property
    def networks(self):
        """Gets the networks of this VirtualMachineMetadata.  # noqa: E501

        List of networks the virtual machine is connected to.  # noqa: E501

        :return: The networks of this VirtualMachineMetadata.  # noqa: E501
        :rtype: list[NutanixNetwork]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this VirtualMachineMetadata.

        List of networks the virtual machine is connected to.  # noqa: E501

        :param networks: The networks of this VirtualMachineMetadata.  # noqa: E501
        :type: list[NutanixNetwork]
        """

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualMachineMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualMachineMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
