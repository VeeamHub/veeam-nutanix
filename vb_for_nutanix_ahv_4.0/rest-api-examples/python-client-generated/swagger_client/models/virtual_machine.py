# coding: utf-8

"""
    Veeam Backup for Nutanix AHV REST API 4.0

    This REST API reference lists types of Veeam Backup for Nutanix AHV entities,  and contains description of collections and resources which stand for these entities.  Every resource has a JSON object model and includes application data and REST API metadata.  Application data is represented by properties associated with Veeam Backup for Nutanix AHV entities.  REST API metadata is represented by properties specific to the REST API, such as resource IDs, URLs and relationships.  The reference also includes methods that represent operations available to a resource or collection.   # noqa: E501

    OpenAPI spec version: V4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VirtualMachine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'cluster_id': 'str',
        'cluster_name': 'str',
        'vm_size': 'int',
        'volume_group_size': 'int',
        'protection_domain': 'str',
        'consistency_group': 'str',
        'disks': 'list[Disk]',
        'volume_groups': 'list[str]',
        'network_adapters': 'list[NetworkAdapter]',
        'guest_os_version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'vm_size': 'vmSize',
        'volume_group_size': 'volumeGroupSize',
        'protection_domain': 'protectionDomain',
        'consistency_group': 'consistencyGroup',
        'disks': 'disks',
        'volume_groups': 'volumeGroups',
        'network_adapters': 'networkAdapters',
        'guest_os_version': 'guestOsVersion'
    }

    def __init__(self, id=None, name=None, cluster_id=None, cluster_name=None, vm_size=None, volume_group_size=None, protection_domain=None, consistency_group=None, disks=None, volume_groups=None, network_adapters=None, guest_os_version=None):  # noqa: E501
        """VirtualMachine - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._cluster_id = None
        self._cluster_name = None
        self._vm_size = None
        self._volume_group_size = None
        self._protection_domain = None
        self._consistency_group = None
        self._disks = None
        self._volume_groups = None
        self._network_adapters = None
        self._guest_os_version = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if vm_size is not None:
            self.vm_size = vm_size
        if volume_group_size is not None:
            self.volume_group_size = volume_group_size
        if protection_domain is not None:
            self.protection_domain = protection_domain
        if consistency_group is not None:
            self.consistency_group = consistency_group
        if disks is not None:
            self.disks = disks
        if volume_groups is not None:
            self.volume_groups = volume_groups
        if network_adapters is not None:
            self.network_adapters = network_adapters
        if guest_os_version is not None:
            self.guest_os_version = guest_os_version

    @property
    def id(self):
        """Gets the id of this VirtualMachine.  # noqa: E501

        System ID assigned to a VM in the Nutanix environment.  # noqa: E501

        :return: The id of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachine.

        System ID assigned to a VM in the Nutanix environment.  # noqa: E501

        :param id: The id of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualMachine.  # noqa: E501

        Name of the VM.  # noqa: E501

        :return: The name of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachine.

        Name of the VM.  # noqa: E501

        :param name: The name of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this VirtualMachine.  # noqa: E501

        ID of the cluster to which the VM belongs.  # noqa: E501

        :return: The cluster_id of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this VirtualMachine.

        ID of the cluster to which the VM belongs.  # noqa: E501

        :param cluster_id: The cluster_id of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this VirtualMachine.  # noqa: E501

        Name of the cluster to which the VM belongs.  # noqa: E501

        :return: The cluster_name of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this VirtualMachine.

        Name of the cluster to which the VM belongs.  # noqa: E501

        :param cluster_name: The cluster_name of this VirtualMachine.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def vm_size(self):
        """Gets the vm_size of this VirtualMachine.  # noqa: E501

        Size of all disks attached to the VM (in bytes).  # noqa: E501

        :return: The vm_size of this VirtualMachine.  # noqa: E501
        :rtype: int
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this VirtualMachine.

        Size of all disks attached to the VM (in bytes).  # noqa: E501

        :param vm_size: The vm_size of this VirtualMachine.  # noqa: E501
        :type: int
        """

        self._vm_size = vm_size

    @property
    def volume_group_size(self):
        """Gets the volume_group_size of this VirtualMachine.  # noqa: E501

        Size of all disks in the attached volume groups (in bytes).  # noqa: E501

        :return: The volume_group_size of this VirtualMachine.  # noqa: E501
        :rtype: int
        """
        return self._volume_group_size

    @volume_group_size.setter
    def volume_group_size(self, volume_group_size):
        """Sets the volume_group_size of this VirtualMachine.

        Size of all disks in the attached volume groups (in bytes).  # noqa: E501

        :param volume_group_size: The volume_group_size of this VirtualMachine.  # noqa: E501
        :type: int
        """

        self._volume_group_size = volume_group_size

    @property
    def protection_domain(self):
        """Gets the protection_domain of this VirtualMachine.  # noqa: E501

        Name of the protection domain that includes the VM.  # noqa: E501

        :return: The protection_domain of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._protection_domain

    @protection_domain.setter
    def protection_domain(self, protection_domain):
        """Sets the protection_domain of this VirtualMachine.

        Name of the protection domain that includes the VM.  # noqa: E501

        :param protection_domain: The protection_domain of this VirtualMachine.  # noqa: E501
        :type: str
        """

        self._protection_domain = protection_domain

    @property
    def consistency_group(self):
        """Gets the consistency_group of this VirtualMachine.  # noqa: E501

        Name of the consistency group that includes the VM.  # noqa: E501

        :return: The consistency_group of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this VirtualMachine.

        Name of the consistency group that includes the VM.  # noqa: E501

        :param consistency_group: The consistency_group of this VirtualMachine.  # noqa: E501
        :type: str
        """

        self._consistency_group = consistency_group

    @property
    def disks(self):
        """Gets the disks of this VirtualMachine.  # noqa: E501

        Disks attached to the VM.  # noqa: E501

        :return: The disks of this VirtualMachine.  # noqa: E501
        :rtype: list[Disk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VirtualMachine.

        Disks attached to the VM.  # noqa: E501

        :param disks: The disks of this VirtualMachine.  # noqa: E501
        :type: list[Disk]
        """

        self._disks = disks

    @property
    def volume_groups(self):
        """Gets the volume_groups of this VirtualMachine.  # noqa: E501

        Volume groups attached to the VM.  # noqa: E501

        :return: The volume_groups of this VirtualMachine.  # noqa: E501
        :rtype: list[str]
        """
        return self._volume_groups

    @volume_groups.setter
    def volume_groups(self, volume_groups):
        """Sets the volume_groups of this VirtualMachine.

        Volume groups attached to the VM.  # noqa: E501

        :param volume_groups: The volume_groups of this VirtualMachine.  # noqa: E501
        :type: list[str]
        """

        self._volume_groups = volume_groups

    @property
    def network_adapters(self):
        """Gets the network_adapters of this VirtualMachine.  # noqa: E501

        Network adapters configured on the VM.  # noqa: E501

        :return: The network_adapters of this VirtualMachine.  # noqa: E501
        :rtype: list[NetworkAdapter]
        """
        return self._network_adapters

    @network_adapters.setter
    def network_adapters(self, network_adapters):
        """Sets the network_adapters of this VirtualMachine.

        Network adapters configured on the VM.  # noqa: E501

        :param network_adapters: The network_adapters of this VirtualMachine.  # noqa: E501
        :type: list[NetworkAdapter]
        """

        self._network_adapters = network_adapters

    @property
    def guest_os_version(self):
        """Gets the guest_os_version of this VirtualMachine.  # noqa: E501

        Version of the operating system running in the VM.  # noqa: E501

        :return: The guest_os_version of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._guest_os_version

    @guest_os_version.setter
    def guest_os_version(self, guest_os_version):
        """Sets the guest_os_version of this VirtualMachine.

        Version of the operating system running in the VM.  # noqa: E501

        :param guest_os_version: The guest_os_version of this VirtualMachine.  # noqa: E501
        :type: str
        """

        self._guest_os_version = guest_os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualMachine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualMachine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
